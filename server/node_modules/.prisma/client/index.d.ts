
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model GameSession
 * 
 */
export type GameSession = $Result.DefaultSelection<Prisma.$GameSessionPayload>
/**
 * Model PlayerBoard
 * 
 */
export type PlayerBoard = $Result.DefaultSelection<Prisma.$PlayerBoardPayload>
/**
 * Model PlayerBoardLocation
 * 
 */
export type PlayerBoardLocation = $Result.DefaultSelection<Prisma.$PlayerBoardLocationPayload>
/**
 * Model RevealedLocation
 * 
 */
export type RevealedLocation = $Result.DefaultSelection<Prisma.$RevealedLocationPayload>
/**
 * Model Winner
 * 
 */
export type Winner = $Result.DefaultSelection<Prisma.$WinnerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const GameStatus: {
  WAITING: 'WAITING',
  STARTING: 'STARTING',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

export type GameStatus = (typeof GameStatus)[keyof typeof GameStatus]

}

export type GameStatus = $Enums.GameStatus

export const GameStatus: typeof $Enums.GameStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameSession`: Exposes CRUD operations for the **GameSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSessions
    * const gameSessions = await prisma.gameSession.findMany()
    * ```
    */
  get gameSession(): Prisma.GameSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerBoard`: Exposes CRUD operations for the **PlayerBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerBoards
    * const playerBoards = await prisma.playerBoard.findMany()
    * ```
    */
  get playerBoard(): Prisma.PlayerBoardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerBoardLocation`: Exposes CRUD operations for the **PlayerBoardLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerBoardLocations
    * const playerBoardLocations = await prisma.playerBoardLocation.findMany()
    * ```
    */
  get playerBoardLocation(): Prisma.PlayerBoardLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.revealedLocation`: Exposes CRUD operations for the **RevealedLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RevealedLocations
    * const revealedLocations = await prisma.revealedLocation.findMany()
    * ```
    */
  get revealedLocation(): Prisma.RevealedLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.winner`: Exposes CRUD operations for the **Winner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Winners
    * const winners = await prisma.winner.findMany()
    * ```
    */
  get winner(): Prisma.WinnerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Location: 'Location',
    GameSession: 'GameSession',
    PlayerBoard: 'PlayerBoard',
    PlayerBoardLocation: 'PlayerBoardLocation',
    RevealedLocation: 'RevealedLocation',
    Winner: 'Winner'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "location" | "gameSession" | "playerBoard" | "playerBoardLocation" | "revealedLocation" | "winner"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      GameSession: {
        payload: Prisma.$GameSessionPayload<ExtArgs>
        fields: Prisma.GameSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findFirst: {
            args: Prisma.GameSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findMany: {
            args: Prisma.GameSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          create: {
            args: Prisma.GameSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          createMany: {
            args: Prisma.GameSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          delete: {
            args: Prisma.GameSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          update: {
            args: Prisma.GameSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          deleteMany: {
            args: Prisma.GameSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          upsert: {
            args: Prisma.GameSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          aggregate: {
            args: Prisma.GameSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSession>
          }
          groupBy: {
            args: Prisma.GameSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSessionCountArgs<ExtArgs>
            result: $Utils.Optional<GameSessionCountAggregateOutputType> | number
          }
        }
      }
      PlayerBoard: {
        payload: Prisma.$PlayerBoardPayload<ExtArgs>
        fields: Prisma.PlayerBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerBoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerBoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          findFirst: {
            args: Prisma.PlayerBoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerBoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          findMany: {
            args: Prisma.PlayerBoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>[]
          }
          create: {
            args: Prisma.PlayerBoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          createMany: {
            args: Prisma.PlayerBoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerBoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>[]
          }
          delete: {
            args: Prisma.PlayerBoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          update: {
            args: Prisma.PlayerBoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          deleteMany: {
            args: Prisma.PlayerBoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerBoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerBoardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>[]
          }
          upsert: {
            args: Prisma.PlayerBoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardPayload>
          }
          aggregate: {
            args: Prisma.PlayerBoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerBoard>
          }
          groupBy: {
            args: Prisma.PlayerBoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerBoardCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerBoardCountAggregateOutputType> | number
          }
        }
      }
      PlayerBoardLocation: {
        payload: Prisma.$PlayerBoardLocationPayload<ExtArgs>
        fields: Prisma.PlayerBoardLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerBoardLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerBoardLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          findFirst: {
            args: Prisma.PlayerBoardLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerBoardLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          findMany: {
            args: Prisma.PlayerBoardLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>[]
          }
          create: {
            args: Prisma.PlayerBoardLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          createMany: {
            args: Prisma.PlayerBoardLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerBoardLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>[]
          }
          delete: {
            args: Prisma.PlayerBoardLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          update: {
            args: Prisma.PlayerBoardLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          deleteMany: {
            args: Prisma.PlayerBoardLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerBoardLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerBoardLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>[]
          }
          upsert: {
            args: Prisma.PlayerBoardLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerBoardLocationPayload>
          }
          aggregate: {
            args: Prisma.PlayerBoardLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerBoardLocation>
          }
          groupBy: {
            args: Prisma.PlayerBoardLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerBoardLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerBoardLocationCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerBoardLocationCountAggregateOutputType> | number
          }
        }
      }
      RevealedLocation: {
        payload: Prisma.$RevealedLocationPayload<ExtArgs>
        fields: Prisma.RevealedLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RevealedLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RevealedLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          findFirst: {
            args: Prisma.RevealedLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RevealedLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          findMany: {
            args: Prisma.RevealedLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>[]
          }
          create: {
            args: Prisma.RevealedLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          createMany: {
            args: Prisma.RevealedLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RevealedLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>[]
          }
          delete: {
            args: Prisma.RevealedLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          update: {
            args: Prisma.RevealedLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          deleteMany: {
            args: Prisma.RevealedLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RevealedLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RevealedLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>[]
          }
          upsert: {
            args: Prisma.RevealedLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevealedLocationPayload>
          }
          aggregate: {
            args: Prisma.RevealedLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRevealedLocation>
          }
          groupBy: {
            args: Prisma.RevealedLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RevealedLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RevealedLocationCountArgs<ExtArgs>
            result: $Utils.Optional<RevealedLocationCountAggregateOutputType> | number
          }
        }
      }
      Winner: {
        payload: Prisma.$WinnerPayload<ExtArgs>
        fields: Prisma.WinnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WinnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WinnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          findFirst: {
            args: Prisma.WinnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WinnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          findMany: {
            args: Prisma.WinnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>[]
          }
          create: {
            args: Prisma.WinnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          createMany: {
            args: Prisma.WinnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WinnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>[]
          }
          delete: {
            args: Prisma.WinnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          update: {
            args: Prisma.WinnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          deleteMany: {
            args: Prisma.WinnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WinnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WinnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>[]
          }
          upsert: {
            args: Prisma.WinnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerPayload>
          }
          aggregate: {
            args: Prisma.WinnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWinner>
          }
          groupBy: {
            args: Prisma.WinnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<WinnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.WinnerCountArgs<ExtArgs>
            result: $Utils.Optional<WinnerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    location?: LocationOmit
    gameSession?: GameSessionOmit
    playerBoard?: PlayerBoardOmit
    playerBoardLocation?: PlayerBoardLocationOmit
    revealedLocation?: RevealedLocationOmit
    winner?: WinnerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdSessions: number
    playerBoards: number
    wins: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdSessions?: boolean | UserCountOutputTypeCountCreatedSessionsArgs
    playerBoards?: boolean | UserCountOutputTypeCountPlayerBoardsArgs
    wins?: boolean | UserCountOutputTypeCountWinsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlayerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WinnerWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    playerBoards: number
    revealedLocations: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playerBoards?: boolean | LocationCountOutputTypeCountPlayerBoardsArgs
    revealedLocations?: boolean | LocationCountOutputTypeCountRevealedLocationsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountPlayerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardLocationWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountRevealedLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevealedLocationWhereInput
  }


  /**
   * Count Type GameSessionCountOutputType
   */

  export type GameSessionCountOutputType = {
    playerBoards: number
    revealedLocations: number
    winners: number
  }

  export type GameSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playerBoards?: boolean | GameSessionCountOutputTypeCountPlayerBoardsArgs
    revealedLocations?: boolean | GameSessionCountOutputTypeCountRevealedLocationsArgs
    winners?: boolean | GameSessionCountOutputTypeCountWinnersArgs
  }

  // Custom InputTypes
  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSessionCountOutputType
     */
    select?: GameSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountPlayerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardWhereInput
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountRevealedLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevealedLocationWhereInput
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountWinnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WinnerWhereInput
  }


  /**
   * Count Type PlayerBoardCountOutputType
   */

  export type PlayerBoardCountOutputType = {
    locations: number
    wins: number
  }

  export type PlayerBoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | PlayerBoardCountOutputTypeCountLocationsArgs
    wins?: boolean | PlayerBoardCountOutputTypeCountWinsArgs
  }

  // Custom InputTypes
  /**
   * PlayerBoardCountOutputType without action
   */
  export type PlayerBoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardCountOutputType
     */
    select?: PlayerBoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerBoardCountOutputType without action
   */
  export type PlayerBoardCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardLocationWhereInput
  }

  /**
   * PlayerBoardCountOutputType without action
   */
  export type PlayerBoardCountOutputTypeCountWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WinnerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    email: string | null
    name: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    email: string | null
    name: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    email: number
    name: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    email: string
    name: string | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdSessions?: boolean | User$createdSessionsArgs<ExtArgs>
    playerBoards?: boolean | User$playerBoardsArgs<ExtArgs>
    wins?: boolean | User$winsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "email" | "name" | "isAdmin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdSessions?: boolean | User$createdSessionsArgs<ExtArgs>
    playerBoards?: boolean | User$playerBoardsArgs<ExtArgs>
    wins?: boolean | User$winsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      playerBoards: Prisma.$PlayerBoardPayload<ExtArgs>[]
      wins: Prisma.$WinnerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      email: string
      name: string | null
      isAdmin: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdSessions<T extends User$createdSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playerBoards<T extends User$playerBoardsArgs<ExtArgs> = {}>(args?: Subset<T, User$playerBoardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wins<T extends User$winsArgs<ExtArgs> = {}>(args?: Subset<T, User$winsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdSessions
   */
  export type User$createdSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * User.playerBoards
   */
  export type User$playerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    where?: PlayerBoardWhereInput
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    cursor?: PlayerBoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerBoardScalarFieldEnum | PlayerBoardScalarFieldEnum[]
  }

  /**
   * User.wins
   */
  export type User$winsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    where?: WinnerWhereInput
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    cursor?: WinnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    imageUrl: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    description: string | null
    imageUrl: string | null
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playerBoards?: boolean | Location$playerBoardsArgs<ExtArgs>
    revealedLocations?: boolean | Location$revealedLocationsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "imageUrl" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playerBoards?: boolean | Location$playerBoardsArgs<ExtArgs>
    revealedLocations?: boolean | Location$revealedLocationsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      playerBoards: Prisma.$PlayerBoardLocationPayload<ExtArgs>[]
      revealedLocations: Prisma.$RevealedLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      imageUrl: string | null
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    playerBoards<T extends Location$playerBoardsArgs<ExtArgs> = {}>(args?: Subset<T, Location$playerBoardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    revealedLocations<T extends Location$revealedLocationsArgs<ExtArgs> = {}>(args?: Subset<T, Location$revealedLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly imageUrl: FieldRef<"Location", 'String'>
    readonly category: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.playerBoards
   */
  export type Location$playerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    where?: PlayerBoardLocationWhereInput
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    cursor?: PlayerBoardLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerBoardLocationScalarFieldEnum | PlayerBoardLocationScalarFieldEnum[]
  }

  /**
   * Location.revealedLocations
   */
  export type Location$revealedLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    where?: RevealedLocationWhereInput
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    cursor?: RevealedLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RevealedLocationScalarFieldEnum | RevealedLocationScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model GameSession
   */

  export type AggregateGameSession = {
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  export type GameSessionAvgAggregateOutputType = {
    revealInterval: number | null
    currentRevealIndex: number | null
    maxReveals: number | null
  }

  export type GameSessionSumAggregateOutputType = {
    revealInterval: number | null
    currentRevealIndex: number | null
    maxReveals: number | null
  }

  export type GameSessionMinAggregateOutputType = {
    id: string | null
    code: string | null
    status: $Enums.GameStatus | null
    revealInterval: number | null
    currentRevealIndex: number | null
    maxReveals: number | null
    createdById: string | null
    startedAt: Date | null
    endedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameSessionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    status: $Enums.GameStatus | null
    revealInterval: number | null
    currentRevealIndex: number | null
    maxReveals: number | null
    createdById: string | null
    startedAt: Date | null
    endedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameSessionCountAggregateOutputType = {
    id: number
    code: number
    status: number
    revealInterval: number
    currentRevealIndex: number
    maxReveals: number
    createdById: number
    startedAt: number
    endedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameSessionAvgAggregateInputType = {
    revealInterval?: true
    currentRevealIndex?: true
    maxReveals?: true
  }

  export type GameSessionSumAggregateInputType = {
    revealInterval?: true
    currentRevealIndex?: true
    maxReveals?: true
  }

  export type GameSessionMinAggregateInputType = {
    id?: true
    code?: true
    status?: true
    revealInterval?: true
    currentRevealIndex?: true
    maxReveals?: true
    createdById?: true
    startedAt?: true
    endedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameSessionMaxAggregateInputType = {
    id?: true
    code?: true
    status?: true
    revealInterval?: true
    currentRevealIndex?: true
    maxReveals?: true
    createdById?: true
    startedAt?: true
    endedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameSessionCountAggregateInputType = {
    id?: true
    code?: true
    status?: true
    revealInterval?: true
    currentRevealIndex?: true
    maxReveals?: true
    createdById?: true
    startedAt?: true
    endedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSession to aggregate.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSessions
    **/
    _count?: true | GameSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSessionMaxAggregateInputType
  }

  export type GetGameSessionAggregateType<T extends GameSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSession[P]>
      : GetScalarType<T[P], AggregateGameSession[P]>
  }




  export type GameSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithAggregationInput | GameSessionOrderByWithAggregationInput[]
    by: GameSessionScalarFieldEnum[] | GameSessionScalarFieldEnum
    having?: GameSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSessionCountAggregateInputType | true
    _avg?: GameSessionAvgAggregateInputType
    _sum?: GameSessionSumAggregateInputType
    _min?: GameSessionMinAggregateInputType
    _max?: GameSessionMaxAggregateInputType
  }

  export type GameSessionGroupByOutputType = {
    id: string
    code: string
    status: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex: number
    maxReveals: number
    createdById: string
    startedAt: Date | null
    endedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  type GetGameSessionGroupByPayload<T extends GameSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
            : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
        }
      >
    >


  export type GameSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    status?: boolean
    revealInterval?: boolean
    currentRevealIndex?: boolean
    maxReveals?: boolean
    createdById?: boolean
    startedAt?: boolean
    endedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    playerBoards?: boolean | GameSession$playerBoardsArgs<ExtArgs>
    revealedLocations?: boolean | GameSession$revealedLocationsArgs<ExtArgs>
    winners?: boolean | GameSession$winnersArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    status?: boolean
    revealInterval?: boolean
    currentRevealIndex?: boolean
    maxReveals?: boolean
    createdById?: boolean
    startedAt?: boolean
    endedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    status?: boolean
    revealInterval?: boolean
    currentRevealIndex?: boolean
    maxReveals?: boolean
    createdById?: boolean
    startedAt?: boolean
    endedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectScalar = {
    id?: boolean
    code?: boolean
    status?: boolean
    revealInterval?: boolean
    currentRevealIndex?: boolean
    maxReveals?: boolean
    createdById?: boolean
    startedAt?: boolean
    endedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "status" | "revealInterval" | "currentRevealIndex" | "maxReveals" | "createdById" | "startedAt" | "endedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["gameSession"]>
  export type GameSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    playerBoards?: boolean | GameSession$playerBoardsArgs<ExtArgs>
    revealedLocations?: boolean | GameSession$revealedLocationsArgs<ExtArgs>
    winners?: boolean | GameSession$winnersArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GameSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GameSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSession"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      playerBoards: Prisma.$PlayerBoardPayload<ExtArgs>[]
      revealedLocations: Prisma.$RevealedLocationPayload<ExtArgs>[]
      winners: Prisma.$WinnerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      status: $Enums.GameStatus
      revealInterval: number
      currentRevealIndex: number
      maxReveals: number
      createdById: string
      startedAt: Date | null
      endedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gameSession"]>
    composites: {}
  }

  type GameSessionGetPayload<S extends boolean | null | undefined | GameSessionDefaultArgs> = $Result.GetResult<Prisma.$GameSessionPayload, S>

  type GameSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameSessionCountAggregateInputType | true
    }

  export interface GameSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSession'], meta: { name: 'GameSession' } }
    /**
     * Find zero or one GameSession that matches the filter.
     * @param {GameSessionFindUniqueArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSessionFindUniqueArgs>(args: SelectSubset<T, GameSessionFindUniqueArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameSessionFindUniqueOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSessionFindFirstArgs>(args?: SelectSubset<T, GameSessionFindFirstArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSessions
     * const gameSessions = await prisma.gameSession.findMany()
     * 
     * // Get first 10 GameSessions
     * const gameSessions = await prisma.gameSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSessionFindManyArgs>(args?: SelectSubset<T, GameSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameSession.
     * @param {GameSessionCreateArgs} args - Arguments to create a GameSession.
     * @example
     * // Create one GameSession
     * const GameSession = await prisma.gameSession.create({
     *   data: {
     *     // ... data to create a GameSession
     *   }
     * })
     * 
     */
    create<T extends GameSessionCreateArgs>(args: SelectSubset<T, GameSessionCreateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameSessions.
     * @param {GameSessionCreateManyArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSessionCreateManyArgs>(args?: SelectSubset<T, GameSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSessions and returns the data saved in the database.
     * @param {GameSessionCreateManyAndReturnArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameSession.
     * @param {GameSessionDeleteArgs} args - Arguments to delete one GameSession.
     * @example
     * // Delete one GameSession
     * const GameSession = await prisma.gameSession.delete({
     *   where: {
     *     // ... filter to delete one GameSession
     *   }
     * })
     * 
     */
    delete<T extends GameSessionDeleteArgs>(args: SelectSubset<T, GameSessionDeleteArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameSession.
     * @param {GameSessionUpdateArgs} args - Arguments to update one GameSession.
     * @example
     * // Update one GameSession
     * const gameSession = await prisma.gameSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSessionUpdateArgs>(args: SelectSubset<T, GameSessionUpdateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameSessions.
     * @param {GameSessionDeleteManyArgs} args - Arguments to filter GameSessions to delete.
     * @example
     * // Delete a few GameSessions
     * const { count } = await prisma.gameSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSessionDeleteManyArgs>(args?: SelectSubset<T, GameSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSessionUpdateManyArgs>(args: SelectSubset<T, GameSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions and returns the data updated in the database.
     * @param {GameSessionUpdateManyAndReturnArgs} args - Arguments to update many GameSessions.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, GameSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameSession.
     * @param {GameSessionUpsertArgs} args - Arguments to update or create a GameSession.
     * @example
     * // Update or create a GameSession
     * const gameSession = await prisma.gameSession.upsert({
     *   create: {
     *     // ... data to create a GameSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSession we want to update
     *   }
     * })
     */
    upsert<T extends GameSessionUpsertArgs>(args: SelectSubset<T, GameSessionUpsertArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionCountArgs} args - Arguments to filter GameSessions to count.
     * @example
     * // Count the number of GameSessions
     * const count = await prisma.gameSession.count({
     *   where: {
     *     // ... the filter for the GameSessions we want to count
     *   }
     * })
    **/
    count<T extends GameSessionCountArgs>(
      args?: Subset<T, GameSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSessionAggregateArgs>(args: Subset<T, GameSessionAggregateArgs>): Prisma.PrismaPromise<GetGameSessionAggregateType<T>>

    /**
     * Group by GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSessionGroupByArgs['orderBy'] }
        : { orderBy?: GameSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSession model
   */
  readonly fields: GameSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    playerBoards<T extends GameSession$playerBoardsArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$playerBoardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    revealedLocations<T extends GameSession$revealedLocationsArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$revealedLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    winners<T extends GameSession$winnersArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$winnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSession model
   */
  interface GameSessionFieldRefs {
    readonly id: FieldRef<"GameSession", 'String'>
    readonly code: FieldRef<"GameSession", 'String'>
    readonly status: FieldRef<"GameSession", 'GameStatus'>
    readonly revealInterval: FieldRef<"GameSession", 'Int'>
    readonly currentRevealIndex: FieldRef<"GameSession", 'Int'>
    readonly maxReveals: FieldRef<"GameSession", 'Int'>
    readonly createdById: FieldRef<"GameSession", 'String'>
    readonly startedAt: FieldRef<"GameSession", 'DateTime'>
    readonly endedAt: FieldRef<"GameSession", 'DateTime'>
    readonly createdAt: FieldRef<"GameSession", 'DateTime'>
    readonly updatedAt: FieldRef<"GameSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameSession findUnique
   */
  export type GameSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findUniqueOrThrow
   */
  export type GameSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findFirst
   */
  export type GameSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findFirstOrThrow
   */
  export type GameSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findMany
   */
  export type GameSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSessions to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession create
   */
  export type GameSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSession.
     */
    data: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
  }

  /**
   * GameSession createMany
   */
  export type GameSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSession createManyAndReturn
   */
  export type GameSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession update
   */
  export type GameSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSession.
     */
    data: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
    /**
     * Choose, which GameSession to update.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession updateMany
   */
  export type GameSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
  }

  /**
   * GameSession updateManyAndReturn
   */
  export type GameSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession upsert
   */
  export type GameSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSession to update in case it exists.
     */
    where: GameSessionWhereUniqueInput
    /**
     * In case the GameSession found by the `where` argument doesn't exist, create a new GameSession with this data.
     */
    create: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
    /**
     * In case the GameSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
  }

  /**
   * GameSession delete
   */
  export type GameSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter which GameSession to delete.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession deleteMany
   */
  export type GameSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSessions to delete
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to delete.
     */
    limit?: number
  }

  /**
   * GameSession.playerBoards
   */
  export type GameSession$playerBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    where?: PlayerBoardWhereInput
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    cursor?: PlayerBoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerBoardScalarFieldEnum | PlayerBoardScalarFieldEnum[]
  }

  /**
   * GameSession.revealedLocations
   */
  export type GameSession$revealedLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    where?: RevealedLocationWhereInput
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    cursor?: RevealedLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RevealedLocationScalarFieldEnum | RevealedLocationScalarFieldEnum[]
  }

  /**
   * GameSession.winners
   */
  export type GameSession$winnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    where?: WinnerWhereInput
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    cursor?: WinnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * GameSession without action
   */
  export type GameSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
  }


  /**
   * Model PlayerBoard
   */

  export type AggregatePlayerBoard = {
    _count: PlayerBoardCountAggregateOutputType | null
    _min: PlayerBoardMinAggregateOutputType | null
    _max: PlayerBoardMaxAggregateOutputType | null
  }

  export type PlayerBoardMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    isReady: boolean | null
    joinedAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerBoardMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    isReady: boolean | null
    joinedAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerBoardCountAggregateOutputType = {
    id: number
    userId: number
    sessionId: number
    boardLayout: number
    isReady: number
    joinedAt: number
    updatedAt: number
    _all: number
  }


  export type PlayerBoardMinAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    isReady?: true
    joinedAt?: true
    updatedAt?: true
  }

  export type PlayerBoardMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    isReady?: true
    joinedAt?: true
    updatedAt?: true
  }

  export type PlayerBoardCountAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    boardLayout?: true
    isReady?: true
    joinedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlayerBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerBoard to aggregate.
     */
    where?: PlayerBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoards to fetch.
     */
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerBoards
    **/
    _count?: true | PlayerBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerBoardMaxAggregateInputType
  }

  export type GetPlayerBoardAggregateType<T extends PlayerBoardAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerBoard[P]>
      : GetScalarType<T[P], AggregatePlayerBoard[P]>
  }




  export type PlayerBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardWhereInput
    orderBy?: PlayerBoardOrderByWithAggregationInput | PlayerBoardOrderByWithAggregationInput[]
    by: PlayerBoardScalarFieldEnum[] | PlayerBoardScalarFieldEnum
    having?: PlayerBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerBoardCountAggregateInputType | true
    _min?: PlayerBoardMinAggregateInputType
    _max?: PlayerBoardMaxAggregateInputType
  }

  export type PlayerBoardGroupByOutputType = {
    id: string
    userId: string
    sessionId: string
    boardLayout: JsonValue
    isReady: boolean
    joinedAt: Date
    updatedAt: Date
    _count: PlayerBoardCountAggregateOutputType | null
    _min: PlayerBoardMinAggregateOutputType | null
    _max: PlayerBoardMaxAggregateOutputType | null
  }

  type GetPlayerBoardGroupByPayload<T extends PlayerBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerBoardGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerBoardGroupByOutputType[P]>
        }
      >
    >


  export type PlayerBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    boardLayout?: boolean
    isReady?: boolean
    joinedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    locations?: boolean | PlayerBoard$locationsArgs<ExtArgs>
    wins?: boolean | PlayerBoard$winsArgs<ExtArgs>
    _count?: boolean | PlayerBoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoard"]>

  export type PlayerBoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    boardLayout?: boolean
    isReady?: boolean
    joinedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoard"]>

  export type PlayerBoardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    boardLayout?: boolean
    isReady?: boolean
    joinedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoard"]>

  export type PlayerBoardSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    boardLayout?: boolean
    isReady?: boolean
    joinedAt?: boolean
    updatedAt?: boolean
  }

  export type PlayerBoardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionId" | "boardLayout" | "isReady" | "joinedAt" | "updatedAt", ExtArgs["result"]["playerBoard"]>
  export type PlayerBoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    locations?: boolean | PlayerBoard$locationsArgs<ExtArgs>
    wins?: boolean | PlayerBoard$winsArgs<ExtArgs>
    _count?: boolean | PlayerBoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerBoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }
  export type PlayerBoardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }

  export type $PlayerBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerBoard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      session: Prisma.$GameSessionPayload<ExtArgs>
      locations: Prisma.$PlayerBoardLocationPayload<ExtArgs>[]
      wins: Prisma.$WinnerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionId: string
      boardLayout: Prisma.JsonValue
      isReady: boolean
      joinedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playerBoard"]>
    composites: {}
  }

  type PlayerBoardGetPayload<S extends boolean | null | undefined | PlayerBoardDefaultArgs> = $Result.GetResult<Prisma.$PlayerBoardPayload, S>

  type PlayerBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerBoardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerBoardCountAggregateInputType | true
    }

  export interface PlayerBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerBoard'], meta: { name: 'PlayerBoard' } }
    /**
     * Find zero or one PlayerBoard that matches the filter.
     * @param {PlayerBoardFindUniqueArgs} args - Arguments to find a PlayerBoard
     * @example
     * // Get one PlayerBoard
     * const playerBoard = await prisma.playerBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerBoardFindUniqueArgs>(args: SelectSubset<T, PlayerBoardFindUniqueArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerBoard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerBoardFindUniqueOrThrowArgs} args - Arguments to find a PlayerBoard
     * @example
     * // Get one PlayerBoard
     * const playerBoard = await prisma.playerBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerBoardFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerBoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardFindFirstArgs} args - Arguments to find a PlayerBoard
     * @example
     * // Get one PlayerBoard
     * const playerBoard = await prisma.playerBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerBoardFindFirstArgs>(args?: SelectSubset<T, PlayerBoardFindFirstArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardFindFirstOrThrowArgs} args - Arguments to find a PlayerBoard
     * @example
     * // Get one PlayerBoard
     * const playerBoard = await prisma.playerBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerBoardFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerBoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerBoards
     * const playerBoards = await prisma.playerBoard.findMany()
     * 
     * // Get first 10 PlayerBoards
     * const playerBoards = await prisma.playerBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerBoardWithIdOnly = await prisma.playerBoard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerBoardFindManyArgs>(args?: SelectSubset<T, PlayerBoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerBoard.
     * @param {PlayerBoardCreateArgs} args - Arguments to create a PlayerBoard.
     * @example
     * // Create one PlayerBoard
     * const PlayerBoard = await prisma.playerBoard.create({
     *   data: {
     *     // ... data to create a PlayerBoard
     *   }
     * })
     * 
     */
    create<T extends PlayerBoardCreateArgs>(args: SelectSubset<T, PlayerBoardCreateArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerBoards.
     * @param {PlayerBoardCreateManyArgs} args - Arguments to create many PlayerBoards.
     * @example
     * // Create many PlayerBoards
     * const playerBoard = await prisma.playerBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerBoardCreateManyArgs>(args?: SelectSubset<T, PlayerBoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerBoards and returns the data saved in the database.
     * @param {PlayerBoardCreateManyAndReturnArgs} args - Arguments to create many PlayerBoards.
     * @example
     * // Create many PlayerBoards
     * const playerBoard = await prisma.playerBoard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerBoards and only return the `id`
     * const playerBoardWithIdOnly = await prisma.playerBoard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerBoardCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerBoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerBoard.
     * @param {PlayerBoardDeleteArgs} args - Arguments to delete one PlayerBoard.
     * @example
     * // Delete one PlayerBoard
     * const PlayerBoard = await prisma.playerBoard.delete({
     *   where: {
     *     // ... filter to delete one PlayerBoard
     *   }
     * })
     * 
     */
    delete<T extends PlayerBoardDeleteArgs>(args: SelectSubset<T, PlayerBoardDeleteArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerBoard.
     * @param {PlayerBoardUpdateArgs} args - Arguments to update one PlayerBoard.
     * @example
     * // Update one PlayerBoard
     * const playerBoard = await prisma.playerBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerBoardUpdateArgs>(args: SelectSubset<T, PlayerBoardUpdateArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerBoards.
     * @param {PlayerBoardDeleteManyArgs} args - Arguments to filter PlayerBoards to delete.
     * @example
     * // Delete a few PlayerBoards
     * const { count } = await prisma.playerBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerBoardDeleteManyArgs>(args?: SelectSubset<T, PlayerBoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerBoards
     * const playerBoard = await prisma.playerBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerBoardUpdateManyArgs>(args: SelectSubset<T, PlayerBoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerBoards and returns the data updated in the database.
     * @param {PlayerBoardUpdateManyAndReturnArgs} args - Arguments to update many PlayerBoards.
     * @example
     * // Update many PlayerBoards
     * const playerBoard = await prisma.playerBoard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerBoards and only return the `id`
     * const playerBoardWithIdOnly = await prisma.playerBoard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerBoardUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerBoardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerBoard.
     * @param {PlayerBoardUpsertArgs} args - Arguments to update or create a PlayerBoard.
     * @example
     * // Update or create a PlayerBoard
     * const playerBoard = await prisma.playerBoard.upsert({
     *   create: {
     *     // ... data to create a PlayerBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerBoard we want to update
     *   }
     * })
     */
    upsert<T extends PlayerBoardUpsertArgs>(args: SelectSubset<T, PlayerBoardUpsertArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardCountArgs} args - Arguments to filter PlayerBoards to count.
     * @example
     * // Count the number of PlayerBoards
     * const count = await prisma.playerBoard.count({
     *   where: {
     *     // ... the filter for the PlayerBoards we want to count
     *   }
     * })
    **/
    count<T extends PlayerBoardCountArgs>(
      args?: Subset<T, PlayerBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerBoardAggregateArgs>(args: Subset<T, PlayerBoardAggregateArgs>): Prisma.PrismaPromise<GetPlayerBoardAggregateType<T>>

    /**
     * Group by PlayerBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerBoardGroupByArgs['orderBy'] }
        : { orderBy?: PlayerBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerBoard model
   */
  readonly fields: PlayerBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    session<T extends GameSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameSessionDefaultArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    locations<T extends PlayerBoard$locationsArgs<ExtArgs> = {}>(args?: Subset<T, PlayerBoard$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wins<T extends PlayerBoard$winsArgs<ExtArgs> = {}>(args?: Subset<T, PlayerBoard$winsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerBoard model
   */
  interface PlayerBoardFieldRefs {
    readonly id: FieldRef<"PlayerBoard", 'String'>
    readonly userId: FieldRef<"PlayerBoard", 'String'>
    readonly sessionId: FieldRef<"PlayerBoard", 'String'>
    readonly boardLayout: FieldRef<"PlayerBoard", 'Json'>
    readonly isReady: FieldRef<"PlayerBoard", 'Boolean'>
    readonly joinedAt: FieldRef<"PlayerBoard", 'DateTime'>
    readonly updatedAt: FieldRef<"PlayerBoard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlayerBoard findUnique
   */
  export type PlayerBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoard to fetch.
     */
    where: PlayerBoardWhereUniqueInput
  }

  /**
   * PlayerBoard findUniqueOrThrow
   */
  export type PlayerBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoard to fetch.
     */
    where: PlayerBoardWhereUniqueInput
  }

  /**
   * PlayerBoard findFirst
   */
  export type PlayerBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoard to fetch.
     */
    where?: PlayerBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoards to fetch.
     */
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerBoards.
     */
    cursor?: PlayerBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerBoards.
     */
    distinct?: PlayerBoardScalarFieldEnum | PlayerBoardScalarFieldEnum[]
  }

  /**
   * PlayerBoard findFirstOrThrow
   */
  export type PlayerBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoard to fetch.
     */
    where?: PlayerBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoards to fetch.
     */
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerBoards.
     */
    cursor?: PlayerBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerBoards.
     */
    distinct?: PlayerBoardScalarFieldEnum | PlayerBoardScalarFieldEnum[]
  }

  /**
   * PlayerBoard findMany
   */
  export type PlayerBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoards to fetch.
     */
    where?: PlayerBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoards to fetch.
     */
    orderBy?: PlayerBoardOrderByWithRelationInput | PlayerBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerBoards.
     */
    cursor?: PlayerBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoards.
     */
    skip?: number
    distinct?: PlayerBoardScalarFieldEnum | PlayerBoardScalarFieldEnum[]
  }

  /**
   * PlayerBoard create
   */
  export type PlayerBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerBoard.
     */
    data: XOR<PlayerBoardCreateInput, PlayerBoardUncheckedCreateInput>
  }

  /**
   * PlayerBoard createMany
   */
  export type PlayerBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerBoards.
     */
    data: PlayerBoardCreateManyInput | PlayerBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerBoard createManyAndReturn
   */
  export type PlayerBoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerBoards.
     */
    data: PlayerBoardCreateManyInput | PlayerBoardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerBoard update
   */
  export type PlayerBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerBoard.
     */
    data: XOR<PlayerBoardUpdateInput, PlayerBoardUncheckedUpdateInput>
    /**
     * Choose, which PlayerBoard to update.
     */
    where: PlayerBoardWhereUniqueInput
  }

  /**
   * PlayerBoard updateMany
   */
  export type PlayerBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerBoards.
     */
    data: XOR<PlayerBoardUpdateManyMutationInput, PlayerBoardUncheckedUpdateManyInput>
    /**
     * Filter which PlayerBoards to update
     */
    where?: PlayerBoardWhereInput
    /**
     * Limit how many PlayerBoards to update.
     */
    limit?: number
  }

  /**
   * PlayerBoard updateManyAndReturn
   */
  export type PlayerBoardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * The data used to update PlayerBoards.
     */
    data: XOR<PlayerBoardUpdateManyMutationInput, PlayerBoardUncheckedUpdateManyInput>
    /**
     * Filter which PlayerBoards to update
     */
    where?: PlayerBoardWhereInput
    /**
     * Limit how many PlayerBoards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerBoard upsert
   */
  export type PlayerBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerBoard to update in case it exists.
     */
    where: PlayerBoardWhereUniqueInput
    /**
     * In case the PlayerBoard found by the `where` argument doesn't exist, create a new PlayerBoard with this data.
     */
    create: XOR<PlayerBoardCreateInput, PlayerBoardUncheckedCreateInput>
    /**
     * In case the PlayerBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerBoardUpdateInput, PlayerBoardUncheckedUpdateInput>
  }

  /**
   * PlayerBoard delete
   */
  export type PlayerBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
    /**
     * Filter which PlayerBoard to delete.
     */
    where: PlayerBoardWhereUniqueInput
  }

  /**
   * PlayerBoard deleteMany
   */
  export type PlayerBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerBoards to delete
     */
    where?: PlayerBoardWhereInput
    /**
     * Limit how many PlayerBoards to delete.
     */
    limit?: number
  }

  /**
   * PlayerBoard.locations
   */
  export type PlayerBoard$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    where?: PlayerBoardLocationWhereInput
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    cursor?: PlayerBoardLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerBoardLocationScalarFieldEnum | PlayerBoardLocationScalarFieldEnum[]
  }

  /**
   * PlayerBoard.wins
   */
  export type PlayerBoard$winsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    where?: WinnerWhereInput
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    cursor?: WinnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * PlayerBoard without action
   */
  export type PlayerBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoard
     */
    select?: PlayerBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoard
     */
    omit?: PlayerBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardInclude<ExtArgs> | null
  }


  /**
   * Model PlayerBoardLocation
   */

  export type AggregatePlayerBoardLocation = {
    _count: PlayerBoardLocationCountAggregateOutputType | null
    _avg: PlayerBoardLocationAvgAggregateOutputType | null
    _sum: PlayerBoardLocationSumAggregateOutputType | null
    _min: PlayerBoardLocationMinAggregateOutputType | null
    _max: PlayerBoardLocationMaxAggregateOutputType | null
  }

  export type PlayerBoardLocationAvgAggregateOutputType = {
    position: number | null
  }

  export type PlayerBoardLocationSumAggregateOutputType = {
    position: number | null
  }

  export type PlayerBoardLocationMinAggregateOutputType = {
    id: string | null
    boardId: string | null
    locationId: string | null
    position: number | null
    isSelected: boolean | null
  }

  export type PlayerBoardLocationMaxAggregateOutputType = {
    id: string | null
    boardId: string | null
    locationId: string | null
    position: number | null
    isSelected: boolean | null
  }

  export type PlayerBoardLocationCountAggregateOutputType = {
    id: number
    boardId: number
    locationId: number
    position: number
    isSelected: number
    _all: number
  }


  export type PlayerBoardLocationAvgAggregateInputType = {
    position?: true
  }

  export type PlayerBoardLocationSumAggregateInputType = {
    position?: true
  }

  export type PlayerBoardLocationMinAggregateInputType = {
    id?: true
    boardId?: true
    locationId?: true
    position?: true
    isSelected?: true
  }

  export type PlayerBoardLocationMaxAggregateInputType = {
    id?: true
    boardId?: true
    locationId?: true
    position?: true
    isSelected?: true
  }

  export type PlayerBoardLocationCountAggregateInputType = {
    id?: true
    boardId?: true
    locationId?: true
    position?: true
    isSelected?: true
    _all?: true
  }

  export type PlayerBoardLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerBoardLocation to aggregate.
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoardLocations to fetch.
     */
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerBoardLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoardLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoardLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerBoardLocations
    **/
    _count?: true | PlayerBoardLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerBoardLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerBoardLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerBoardLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerBoardLocationMaxAggregateInputType
  }

  export type GetPlayerBoardLocationAggregateType<T extends PlayerBoardLocationAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerBoardLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerBoardLocation[P]>
      : GetScalarType<T[P], AggregatePlayerBoardLocation[P]>
  }




  export type PlayerBoardLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerBoardLocationWhereInput
    orderBy?: PlayerBoardLocationOrderByWithAggregationInput | PlayerBoardLocationOrderByWithAggregationInput[]
    by: PlayerBoardLocationScalarFieldEnum[] | PlayerBoardLocationScalarFieldEnum
    having?: PlayerBoardLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerBoardLocationCountAggregateInputType | true
    _avg?: PlayerBoardLocationAvgAggregateInputType
    _sum?: PlayerBoardLocationSumAggregateInputType
    _min?: PlayerBoardLocationMinAggregateInputType
    _max?: PlayerBoardLocationMaxAggregateInputType
  }

  export type PlayerBoardLocationGroupByOutputType = {
    id: string
    boardId: string
    locationId: string
    position: number
    isSelected: boolean
    _count: PlayerBoardLocationCountAggregateOutputType | null
    _avg: PlayerBoardLocationAvgAggregateOutputType | null
    _sum: PlayerBoardLocationSumAggregateOutputType | null
    _min: PlayerBoardLocationMinAggregateOutputType | null
    _max: PlayerBoardLocationMaxAggregateOutputType | null
  }

  type GetPlayerBoardLocationGroupByPayload<T extends PlayerBoardLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerBoardLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerBoardLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerBoardLocationGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerBoardLocationGroupByOutputType[P]>
        }
      >
    >


  export type PlayerBoardLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    locationId?: boolean
    position?: boolean
    isSelected?: boolean
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoardLocation"]>

  export type PlayerBoardLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    locationId?: boolean
    position?: boolean
    isSelected?: boolean
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoardLocation"]>

  export type PlayerBoardLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    locationId?: boolean
    position?: boolean
    isSelected?: boolean
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerBoardLocation"]>

  export type PlayerBoardLocationSelectScalar = {
    id?: boolean
    boardId?: boolean
    locationId?: boolean
    position?: boolean
    isSelected?: boolean
  }

  export type PlayerBoardLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "boardId" | "locationId" | "position" | "isSelected", ExtArgs["result"]["playerBoardLocation"]>
  export type PlayerBoardLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type PlayerBoardLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type PlayerBoardLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $PlayerBoardLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerBoardLocation"
    objects: {
      board: Prisma.$PlayerBoardPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      boardId: string
      locationId: string
      position: number
      isSelected: boolean
    }, ExtArgs["result"]["playerBoardLocation"]>
    composites: {}
  }

  type PlayerBoardLocationGetPayload<S extends boolean | null | undefined | PlayerBoardLocationDefaultArgs> = $Result.GetResult<Prisma.$PlayerBoardLocationPayload, S>

  type PlayerBoardLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerBoardLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerBoardLocationCountAggregateInputType | true
    }

  export interface PlayerBoardLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerBoardLocation'], meta: { name: 'PlayerBoardLocation' } }
    /**
     * Find zero or one PlayerBoardLocation that matches the filter.
     * @param {PlayerBoardLocationFindUniqueArgs} args - Arguments to find a PlayerBoardLocation
     * @example
     * // Get one PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerBoardLocationFindUniqueArgs>(args: SelectSubset<T, PlayerBoardLocationFindUniqueArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerBoardLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerBoardLocationFindUniqueOrThrowArgs} args - Arguments to find a PlayerBoardLocation
     * @example
     * // Get one PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerBoardLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerBoardLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerBoardLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationFindFirstArgs} args - Arguments to find a PlayerBoardLocation
     * @example
     * // Get one PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerBoardLocationFindFirstArgs>(args?: SelectSubset<T, PlayerBoardLocationFindFirstArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerBoardLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationFindFirstOrThrowArgs} args - Arguments to find a PlayerBoardLocation
     * @example
     * // Get one PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerBoardLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerBoardLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerBoardLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerBoardLocations
     * const playerBoardLocations = await prisma.playerBoardLocation.findMany()
     * 
     * // Get first 10 PlayerBoardLocations
     * const playerBoardLocations = await prisma.playerBoardLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerBoardLocationWithIdOnly = await prisma.playerBoardLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerBoardLocationFindManyArgs>(args?: SelectSubset<T, PlayerBoardLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerBoardLocation.
     * @param {PlayerBoardLocationCreateArgs} args - Arguments to create a PlayerBoardLocation.
     * @example
     * // Create one PlayerBoardLocation
     * const PlayerBoardLocation = await prisma.playerBoardLocation.create({
     *   data: {
     *     // ... data to create a PlayerBoardLocation
     *   }
     * })
     * 
     */
    create<T extends PlayerBoardLocationCreateArgs>(args: SelectSubset<T, PlayerBoardLocationCreateArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerBoardLocations.
     * @param {PlayerBoardLocationCreateManyArgs} args - Arguments to create many PlayerBoardLocations.
     * @example
     * // Create many PlayerBoardLocations
     * const playerBoardLocation = await prisma.playerBoardLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerBoardLocationCreateManyArgs>(args?: SelectSubset<T, PlayerBoardLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerBoardLocations and returns the data saved in the database.
     * @param {PlayerBoardLocationCreateManyAndReturnArgs} args - Arguments to create many PlayerBoardLocations.
     * @example
     * // Create many PlayerBoardLocations
     * const playerBoardLocation = await prisma.playerBoardLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerBoardLocations and only return the `id`
     * const playerBoardLocationWithIdOnly = await prisma.playerBoardLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerBoardLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerBoardLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerBoardLocation.
     * @param {PlayerBoardLocationDeleteArgs} args - Arguments to delete one PlayerBoardLocation.
     * @example
     * // Delete one PlayerBoardLocation
     * const PlayerBoardLocation = await prisma.playerBoardLocation.delete({
     *   where: {
     *     // ... filter to delete one PlayerBoardLocation
     *   }
     * })
     * 
     */
    delete<T extends PlayerBoardLocationDeleteArgs>(args: SelectSubset<T, PlayerBoardLocationDeleteArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerBoardLocation.
     * @param {PlayerBoardLocationUpdateArgs} args - Arguments to update one PlayerBoardLocation.
     * @example
     * // Update one PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerBoardLocationUpdateArgs>(args: SelectSubset<T, PlayerBoardLocationUpdateArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerBoardLocations.
     * @param {PlayerBoardLocationDeleteManyArgs} args - Arguments to filter PlayerBoardLocations to delete.
     * @example
     * // Delete a few PlayerBoardLocations
     * const { count } = await prisma.playerBoardLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerBoardLocationDeleteManyArgs>(args?: SelectSubset<T, PlayerBoardLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerBoardLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerBoardLocations
     * const playerBoardLocation = await prisma.playerBoardLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerBoardLocationUpdateManyArgs>(args: SelectSubset<T, PlayerBoardLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerBoardLocations and returns the data updated in the database.
     * @param {PlayerBoardLocationUpdateManyAndReturnArgs} args - Arguments to update many PlayerBoardLocations.
     * @example
     * // Update many PlayerBoardLocations
     * const playerBoardLocation = await prisma.playerBoardLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerBoardLocations and only return the `id`
     * const playerBoardLocationWithIdOnly = await prisma.playerBoardLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerBoardLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerBoardLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerBoardLocation.
     * @param {PlayerBoardLocationUpsertArgs} args - Arguments to update or create a PlayerBoardLocation.
     * @example
     * // Update or create a PlayerBoardLocation
     * const playerBoardLocation = await prisma.playerBoardLocation.upsert({
     *   create: {
     *     // ... data to create a PlayerBoardLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerBoardLocation we want to update
     *   }
     * })
     */
    upsert<T extends PlayerBoardLocationUpsertArgs>(args: SelectSubset<T, PlayerBoardLocationUpsertArgs<ExtArgs>>): Prisma__PlayerBoardLocationClient<$Result.GetResult<Prisma.$PlayerBoardLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerBoardLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationCountArgs} args - Arguments to filter PlayerBoardLocations to count.
     * @example
     * // Count the number of PlayerBoardLocations
     * const count = await prisma.playerBoardLocation.count({
     *   where: {
     *     // ... the filter for the PlayerBoardLocations we want to count
     *   }
     * })
    **/
    count<T extends PlayerBoardLocationCountArgs>(
      args?: Subset<T, PlayerBoardLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerBoardLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerBoardLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerBoardLocationAggregateArgs>(args: Subset<T, PlayerBoardLocationAggregateArgs>): Prisma.PrismaPromise<GetPlayerBoardLocationAggregateType<T>>

    /**
     * Group by PlayerBoardLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerBoardLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerBoardLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerBoardLocationGroupByArgs['orderBy'] }
        : { orderBy?: PlayerBoardLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerBoardLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerBoardLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerBoardLocation model
   */
  readonly fields: PlayerBoardLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerBoardLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerBoardLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    board<T extends PlayerBoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerBoardDefaultArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerBoardLocation model
   */
  interface PlayerBoardLocationFieldRefs {
    readonly id: FieldRef<"PlayerBoardLocation", 'String'>
    readonly boardId: FieldRef<"PlayerBoardLocation", 'String'>
    readonly locationId: FieldRef<"PlayerBoardLocation", 'String'>
    readonly position: FieldRef<"PlayerBoardLocation", 'Int'>
    readonly isSelected: FieldRef<"PlayerBoardLocation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PlayerBoardLocation findUnique
   */
  export type PlayerBoardLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoardLocation to fetch.
     */
    where: PlayerBoardLocationWhereUniqueInput
  }

  /**
   * PlayerBoardLocation findUniqueOrThrow
   */
  export type PlayerBoardLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoardLocation to fetch.
     */
    where: PlayerBoardLocationWhereUniqueInput
  }

  /**
   * PlayerBoardLocation findFirst
   */
  export type PlayerBoardLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoardLocation to fetch.
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoardLocations to fetch.
     */
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerBoardLocations.
     */
    cursor?: PlayerBoardLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoardLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoardLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerBoardLocations.
     */
    distinct?: PlayerBoardLocationScalarFieldEnum | PlayerBoardLocationScalarFieldEnum[]
  }

  /**
   * PlayerBoardLocation findFirstOrThrow
   */
  export type PlayerBoardLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoardLocation to fetch.
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoardLocations to fetch.
     */
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerBoardLocations.
     */
    cursor?: PlayerBoardLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoardLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoardLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerBoardLocations.
     */
    distinct?: PlayerBoardLocationScalarFieldEnum | PlayerBoardLocationScalarFieldEnum[]
  }

  /**
   * PlayerBoardLocation findMany
   */
  export type PlayerBoardLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter, which PlayerBoardLocations to fetch.
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerBoardLocations to fetch.
     */
    orderBy?: PlayerBoardLocationOrderByWithRelationInput | PlayerBoardLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerBoardLocations.
     */
    cursor?: PlayerBoardLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerBoardLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerBoardLocations.
     */
    skip?: number
    distinct?: PlayerBoardLocationScalarFieldEnum | PlayerBoardLocationScalarFieldEnum[]
  }

  /**
   * PlayerBoardLocation create
   */
  export type PlayerBoardLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerBoardLocation.
     */
    data: XOR<PlayerBoardLocationCreateInput, PlayerBoardLocationUncheckedCreateInput>
  }

  /**
   * PlayerBoardLocation createMany
   */
  export type PlayerBoardLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerBoardLocations.
     */
    data: PlayerBoardLocationCreateManyInput | PlayerBoardLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerBoardLocation createManyAndReturn
   */
  export type PlayerBoardLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerBoardLocations.
     */
    data: PlayerBoardLocationCreateManyInput | PlayerBoardLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerBoardLocation update
   */
  export type PlayerBoardLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerBoardLocation.
     */
    data: XOR<PlayerBoardLocationUpdateInput, PlayerBoardLocationUncheckedUpdateInput>
    /**
     * Choose, which PlayerBoardLocation to update.
     */
    where: PlayerBoardLocationWhereUniqueInput
  }

  /**
   * PlayerBoardLocation updateMany
   */
  export type PlayerBoardLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerBoardLocations.
     */
    data: XOR<PlayerBoardLocationUpdateManyMutationInput, PlayerBoardLocationUncheckedUpdateManyInput>
    /**
     * Filter which PlayerBoardLocations to update
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * Limit how many PlayerBoardLocations to update.
     */
    limit?: number
  }

  /**
   * PlayerBoardLocation updateManyAndReturn
   */
  export type PlayerBoardLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * The data used to update PlayerBoardLocations.
     */
    data: XOR<PlayerBoardLocationUpdateManyMutationInput, PlayerBoardLocationUncheckedUpdateManyInput>
    /**
     * Filter which PlayerBoardLocations to update
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * Limit how many PlayerBoardLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerBoardLocation upsert
   */
  export type PlayerBoardLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerBoardLocation to update in case it exists.
     */
    where: PlayerBoardLocationWhereUniqueInput
    /**
     * In case the PlayerBoardLocation found by the `where` argument doesn't exist, create a new PlayerBoardLocation with this data.
     */
    create: XOR<PlayerBoardLocationCreateInput, PlayerBoardLocationUncheckedCreateInput>
    /**
     * In case the PlayerBoardLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerBoardLocationUpdateInput, PlayerBoardLocationUncheckedUpdateInput>
  }

  /**
   * PlayerBoardLocation delete
   */
  export type PlayerBoardLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
    /**
     * Filter which PlayerBoardLocation to delete.
     */
    where: PlayerBoardLocationWhereUniqueInput
  }

  /**
   * PlayerBoardLocation deleteMany
   */
  export type PlayerBoardLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerBoardLocations to delete
     */
    where?: PlayerBoardLocationWhereInput
    /**
     * Limit how many PlayerBoardLocations to delete.
     */
    limit?: number
  }

  /**
   * PlayerBoardLocation without action
   */
  export type PlayerBoardLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerBoardLocation
     */
    select?: PlayerBoardLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerBoardLocation
     */
    omit?: PlayerBoardLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerBoardLocationInclude<ExtArgs> | null
  }


  /**
   * Model RevealedLocation
   */

  export type AggregateRevealedLocation = {
    _count: RevealedLocationCountAggregateOutputType | null
    _avg: RevealedLocationAvgAggregateOutputType | null
    _sum: RevealedLocationSumAggregateOutputType | null
    _min: RevealedLocationMinAggregateOutputType | null
    _max: RevealedLocationMaxAggregateOutputType | null
  }

  export type RevealedLocationAvgAggregateOutputType = {
    revealIndex: number | null
  }

  export type RevealedLocationSumAggregateOutputType = {
    revealIndex: number | null
  }

  export type RevealedLocationMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    locationId: string | null
    revealIndex: number | null
    revealedAt: Date | null
  }

  export type RevealedLocationMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    locationId: string | null
    revealIndex: number | null
    revealedAt: Date | null
  }

  export type RevealedLocationCountAggregateOutputType = {
    id: number
    sessionId: number
    locationId: number
    revealIndex: number
    revealedAt: number
    _all: number
  }


  export type RevealedLocationAvgAggregateInputType = {
    revealIndex?: true
  }

  export type RevealedLocationSumAggregateInputType = {
    revealIndex?: true
  }

  export type RevealedLocationMinAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    revealIndex?: true
    revealedAt?: true
  }

  export type RevealedLocationMaxAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    revealIndex?: true
    revealedAt?: true
  }

  export type RevealedLocationCountAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    revealIndex?: true
    revealedAt?: true
    _all?: true
  }

  export type RevealedLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RevealedLocation to aggregate.
     */
    where?: RevealedLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevealedLocations to fetch.
     */
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RevealedLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevealedLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevealedLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RevealedLocations
    **/
    _count?: true | RevealedLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RevealedLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RevealedLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RevealedLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RevealedLocationMaxAggregateInputType
  }

  export type GetRevealedLocationAggregateType<T extends RevealedLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateRevealedLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRevealedLocation[P]>
      : GetScalarType<T[P], AggregateRevealedLocation[P]>
  }




  export type RevealedLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevealedLocationWhereInput
    orderBy?: RevealedLocationOrderByWithAggregationInput | RevealedLocationOrderByWithAggregationInput[]
    by: RevealedLocationScalarFieldEnum[] | RevealedLocationScalarFieldEnum
    having?: RevealedLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RevealedLocationCountAggregateInputType | true
    _avg?: RevealedLocationAvgAggregateInputType
    _sum?: RevealedLocationSumAggregateInputType
    _min?: RevealedLocationMinAggregateInputType
    _max?: RevealedLocationMaxAggregateInputType
  }

  export type RevealedLocationGroupByOutputType = {
    id: string
    sessionId: string
    locationId: string
    revealIndex: number
    revealedAt: Date
    _count: RevealedLocationCountAggregateOutputType | null
    _avg: RevealedLocationAvgAggregateOutputType | null
    _sum: RevealedLocationSumAggregateOutputType | null
    _min: RevealedLocationMinAggregateOutputType | null
    _max: RevealedLocationMaxAggregateOutputType | null
  }

  type GetRevealedLocationGroupByPayload<T extends RevealedLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RevealedLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RevealedLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RevealedLocationGroupByOutputType[P]>
            : GetScalarType<T[P], RevealedLocationGroupByOutputType[P]>
        }
      >
    >


  export type RevealedLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    revealIndex?: boolean
    revealedAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revealedLocation"]>

  export type RevealedLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    revealIndex?: boolean
    revealedAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revealedLocation"]>

  export type RevealedLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    revealIndex?: boolean
    revealedAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revealedLocation"]>

  export type RevealedLocationSelectScalar = {
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    revealIndex?: boolean
    revealedAt?: boolean
  }

  export type RevealedLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "locationId" | "revealIndex" | "revealedAt", ExtArgs["result"]["revealedLocation"]>
  export type RevealedLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type RevealedLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type RevealedLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $RevealedLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RevealedLocation"
    objects: {
      session: Prisma.$GameSessionPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      locationId: string
      revealIndex: number
      revealedAt: Date
    }, ExtArgs["result"]["revealedLocation"]>
    composites: {}
  }

  type RevealedLocationGetPayload<S extends boolean | null | undefined | RevealedLocationDefaultArgs> = $Result.GetResult<Prisma.$RevealedLocationPayload, S>

  type RevealedLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RevealedLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RevealedLocationCountAggregateInputType | true
    }

  export interface RevealedLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RevealedLocation'], meta: { name: 'RevealedLocation' } }
    /**
     * Find zero or one RevealedLocation that matches the filter.
     * @param {RevealedLocationFindUniqueArgs} args - Arguments to find a RevealedLocation
     * @example
     * // Get one RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RevealedLocationFindUniqueArgs>(args: SelectSubset<T, RevealedLocationFindUniqueArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RevealedLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RevealedLocationFindUniqueOrThrowArgs} args - Arguments to find a RevealedLocation
     * @example
     * // Get one RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RevealedLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, RevealedLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RevealedLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationFindFirstArgs} args - Arguments to find a RevealedLocation
     * @example
     * // Get one RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RevealedLocationFindFirstArgs>(args?: SelectSubset<T, RevealedLocationFindFirstArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RevealedLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationFindFirstOrThrowArgs} args - Arguments to find a RevealedLocation
     * @example
     * // Get one RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RevealedLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, RevealedLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RevealedLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RevealedLocations
     * const revealedLocations = await prisma.revealedLocation.findMany()
     * 
     * // Get first 10 RevealedLocations
     * const revealedLocations = await prisma.revealedLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const revealedLocationWithIdOnly = await prisma.revealedLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RevealedLocationFindManyArgs>(args?: SelectSubset<T, RevealedLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RevealedLocation.
     * @param {RevealedLocationCreateArgs} args - Arguments to create a RevealedLocation.
     * @example
     * // Create one RevealedLocation
     * const RevealedLocation = await prisma.revealedLocation.create({
     *   data: {
     *     // ... data to create a RevealedLocation
     *   }
     * })
     * 
     */
    create<T extends RevealedLocationCreateArgs>(args: SelectSubset<T, RevealedLocationCreateArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RevealedLocations.
     * @param {RevealedLocationCreateManyArgs} args - Arguments to create many RevealedLocations.
     * @example
     * // Create many RevealedLocations
     * const revealedLocation = await prisma.revealedLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RevealedLocationCreateManyArgs>(args?: SelectSubset<T, RevealedLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RevealedLocations and returns the data saved in the database.
     * @param {RevealedLocationCreateManyAndReturnArgs} args - Arguments to create many RevealedLocations.
     * @example
     * // Create many RevealedLocations
     * const revealedLocation = await prisma.revealedLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RevealedLocations and only return the `id`
     * const revealedLocationWithIdOnly = await prisma.revealedLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RevealedLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, RevealedLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RevealedLocation.
     * @param {RevealedLocationDeleteArgs} args - Arguments to delete one RevealedLocation.
     * @example
     * // Delete one RevealedLocation
     * const RevealedLocation = await prisma.revealedLocation.delete({
     *   where: {
     *     // ... filter to delete one RevealedLocation
     *   }
     * })
     * 
     */
    delete<T extends RevealedLocationDeleteArgs>(args: SelectSubset<T, RevealedLocationDeleteArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RevealedLocation.
     * @param {RevealedLocationUpdateArgs} args - Arguments to update one RevealedLocation.
     * @example
     * // Update one RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RevealedLocationUpdateArgs>(args: SelectSubset<T, RevealedLocationUpdateArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RevealedLocations.
     * @param {RevealedLocationDeleteManyArgs} args - Arguments to filter RevealedLocations to delete.
     * @example
     * // Delete a few RevealedLocations
     * const { count } = await prisma.revealedLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RevealedLocationDeleteManyArgs>(args?: SelectSubset<T, RevealedLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RevealedLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RevealedLocations
     * const revealedLocation = await prisma.revealedLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RevealedLocationUpdateManyArgs>(args: SelectSubset<T, RevealedLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RevealedLocations and returns the data updated in the database.
     * @param {RevealedLocationUpdateManyAndReturnArgs} args - Arguments to update many RevealedLocations.
     * @example
     * // Update many RevealedLocations
     * const revealedLocation = await prisma.revealedLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RevealedLocations and only return the `id`
     * const revealedLocationWithIdOnly = await prisma.revealedLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RevealedLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, RevealedLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RevealedLocation.
     * @param {RevealedLocationUpsertArgs} args - Arguments to update or create a RevealedLocation.
     * @example
     * // Update or create a RevealedLocation
     * const revealedLocation = await prisma.revealedLocation.upsert({
     *   create: {
     *     // ... data to create a RevealedLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RevealedLocation we want to update
     *   }
     * })
     */
    upsert<T extends RevealedLocationUpsertArgs>(args: SelectSubset<T, RevealedLocationUpsertArgs<ExtArgs>>): Prisma__RevealedLocationClient<$Result.GetResult<Prisma.$RevealedLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RevealedLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationCountArgs} args - Arguments to filter RevealedLocations to count.
     * @example
     * // Count the number of RevealedLocations
     * const count = await prisma.revealedLocation.count({
     *   where: {
     *     // ... the filter for the RevealedLocations we want to count
     *   }
     * })
    **/
    count<T extends RevealedLocationCountArgs>(
      args?: Subset<T, RevealedLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RevealedLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RevealedLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RevealedLocationAggregateArgs>(args: Subset<T, RevealedLocationAggregateArgs>): Prisma.PrismaPromise<GetRevealedLocationAggregateType<T>>

    /**
     * Group by RevealedLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevealedLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RevealedLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RevealedLocationGroupByArgs['orderBy'] }
        : { orderBy?: RevealedLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RevealedLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRevealedLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RevealedLocation model
   */
  readonly fields: RevealedLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RevealedLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RevealedLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends GameSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameSessionDefaultArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RevealedLocation model
   */
  interface RevealedLocationFieldRefs {
    readonly id: FieldRef<"RevealedLocation", 'String'>
    readonly sessionId: FieldRef<"RevealedLocation", 'String'>
    readonly locationId: FieldRef<"RevealedLocation", 'String'>
    readonly revealIndex: FieldRef<"RevealedLocation", 'Int'>
    readonly revealedAt: FieldRef<"RevealedLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RevealedLocation findUnique
   */
  export type RevealedLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter, which RevealedLocation to fetch.
     */
    where: RevealedLocationWhereUniqueInput
  }

  /**
   * RevealedLocation findUniqueOrThrow
   */
  export type RevealedLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter, which RevealedLocation to fetch.
     */
    where: RevealedLocationWhereUniqueInput
  }

  /**
   * RevealedLocation findFirst
   */
  export type RevealedLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter, which RevealedLocation to fetch.
     */
    where?: RevealedLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevealedLocations to fetch.
     */
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RevealedLocations.
     */
    cursor?: RevealedLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevealedLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevealedLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RevealedLocations.
     */
    distinct?: RevealedLocationScalarFieldEnum | RevealedLocationScalarFieldEnum[]
  }

  /**
   * RevealedLocation findFirstOrThrow
   */
  export type RevealedLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter, which RevealedLocation to fetch.
     */
    where?: RevealedLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevealedLocations to fetch.
     */
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RevealedLocations.
     */
    cursor?: RevealedLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevealedLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevealedLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RevealedLocations.
     */
    distinct?: RevealedLocationScalarFieldEnum | RevealedLocationScalarFieldEnum[]
  }

  /**
   * RevealedLocation findMany
   */
  export type RevealedLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter, which RevealedLocations to fetch.
     */
    where?: RevealedLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevealedLocations to fetch.
     */
    orderBy?: RevealedLocationOrderByWithRelationInput | RevealedLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RevealedLocations.
     */
    cursor?: RevealedLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevealedLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevealedLocations.
     */
    skip?: number
    distinct?: RevealedLocationScalarFieldEnum | RevealedLocationScalarFieldEnum[]
  }

  /**
   * RevealedLocation create
   */
  export type RevealedLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a RevealedLocation.
     */
    data: XOR<RevealedLocationCreateInput, RevealedLocationUncheckedCreateInput>
  }

  /**
   * RevealedLocation createMany
   */
  export type RevealedLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RevealedLocations.
     */
    data: RevealedLocationCreateManyInput | RevealedLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RevealedLocation createManyAndReturn
   */
  export type RevealedLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * The data used to create many RevealedLocations.
     */
    data: RevealedLocationCreateManyInput | RevealedLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RevealedLocation update
   */
  export type RevealedLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a RevealedLocation.
     */
    data: XOR<RevealedLocationUpdateInput, RevealedLocationUncheckedUpdateInput>
    /**
     * Choose, which RevealedLocation to update.
     */
    where: RevealedLocationWhereUniqueInput
  }

  /**
   * RevealedLocation updateMany
   */
  export type RevealedLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RevealedLocations.
     */
    data: XOR<RevealedLocationUpdateManyMutationInput, RevealedLocationUncheckedUpdateManyInput>
    /**
     * Filter which RevealedLocations to update
     */
    where?: RevealedLocationWhereInput
    /**
     * Limit how many RevealedLocations to update.
     */
    limit?: number
  }

  /**
   * RevealedLocation updateManyAndReturn
   */
  export type RevealedLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * The data used to update RevealedLocations.
     */
    data: XOR<RevealedLocationUpdateManyMutationInput, RevealedLocationUncheckedUpdateManyInput>
    /**
     * Filter which RevealedLocations to update
     */
    where?: RevealedLocationWhereInput
    /**
     * Limit how many RevealedLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RevealedLocation upsert
   */
  export type RevealedLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the RevealedLocation to update in case it exists.
     */
    where: RevealedLocationWhereUniqueInput
    /**
     * In case the RevealedLocation found by the `where` argument doesn't exist, create a new RevealedLocation with this data.
     */
    create: XOR<RevealedLocationCreateInput, RevealedLocationUncheckedCreateInput>
    /**
     * In case the RevealedLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RevealedLocationUpdateInput, RevealedLocationUncheckedUpdateInput>
  }

  /**
   * RevealedLocation delete
   */
  export type RevealedLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
    /**
     * Filter which RevealedLocation to delete.
     */
    where: RevealedLocationWhereUniqueInput
  }

  /**
   * RevealedLocation deleteMany
   */
  export type RevealedLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RevealedLocations to delete
     */
    where?: RevealedLocationWhereInput
    /**
     * Limit how many RevealedLocations to delete.
     */
    limit?: number
  }

  /**
   * RevealedLocation without action
   */
  export type RevealedLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevealedLocation
     */
    select?: RevealedLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevealedLocation
     */
    omit?: RevealedLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevealedLocationInclude<ExtArgs> | null
  }


  /**
   * Model Winner
   */

  export type AggregateWinner = {
    _count: WinnerCountAggregateOutputType | null
    _avg: WinnerAvgAggregateOutputType | null
    _sum: WinnerSumAggregateOutputType | null
    _min: WinnerMinAggregateOutputType | null
    _max: WinnerMaxAggregateOutputType | null
  }

  export type WinnerAvgAggregateOutputType = {
    place: number | null
  }

  export type WinnerSumAggregateOutputType = {
    place: number | null
  }

  export type WinnerMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    boardId: string | null
    winPattern: string | null
    place: number | null
    wonAt: Date | null
  }

  export type WinnerMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    boardId: string | null
    winPattern: string | null
    place: number | null
    wonAt: Date | null
  }

  export type WinnerCountAggregateOutputType = {
    id: number
    sessionId: number
    userId: number
    boardId: number
    winPattern: number
    place: number
    wonAt: number
    _all: number
  }


  export type WinnerAvgAggregateInputType = {
    place?: true
  }

  export type WinnerSumAggregateInputType = {
    place?: true
  }

  export type WinnerMinAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    boardId?: true
    winPattern?: true
    place?: true
    wonAt?: true
  }

  export type WinnerMaxAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    boardId?: true
    winPattern?: true
    place?: true
    wonAt?: true
  }

  export type WinnerCountAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    boardId?: true
    winPattern?: true
    place?: true
    wonAt?: true
    _all?: true
  }

  export type WinnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Winner to aggregate.
     */
    where?: WinnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Winners to fetch.
     */
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WinnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Winners
    **/
    _count?: true | WinnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WinnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WinnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WinnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WinnerMaxAggregateInputType
  }

  export type GetWinnerAggregateType<T extends WinnerAggregateArgs> = {
        [P in keyof T & keyof AggregateWinner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWinner[P]>
      : GetScalarType<T[P], AggregateWinner[P]>
  }




  export type WinnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WinnerWhereInput
    orderBy?: WinnerOrderByWithAggregationInput | WinnerOrderByWithAggregationInput[]
    by: WinnerScalarFieldEnum[] | WinnerScalarFieldEnum
    having?: WinnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WinnerCountAggregateInputType | true
    _avg?: WinnerAvgAggregateInputType
    _sum?: WinnerSumAggregateInputType
    _min?: WinnerMinAggregateInputType
    _max?: WinnerMaxAggregateInputType
  }

  export type WinnerGroupByOutputType = {
    id: string
    sessionId: string
    userId: string
    boardId: string
    winPattern: string
    place: number
    wonAt: Date
    _count: WinnerCountAggregateOutputType | null
    _avg: WinnerAvgAggregateOutputType | null
    _sum: WinnerSumAggregateOutputType | null
    _min: WinnerMinAggregateOutputType | null
    _max: WinnerMaxAggregateOutputType | null
  }

  type GetWinnerGroupByPayload<T extends WinnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WinnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WinnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WinnerGroupByOutputType[P]>
            : GetScalarType<T[P], WinnerGroupByOutputType[P]>
        }
      >
    >


  export type WinnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    boardId?: boolean
    winPattern?: boolean
    place?: boolean
    wonAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["winner"]>

  export type WinnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    boardId?: boolean
    winPattern?: boolean
    place?: boolean
    wonAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["winner"]>

  export type WinnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    boardId?: boolean
    winPattern?: boolean
    place?: boolean
    wonAt?: boolean
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["winner"]>

  export type WinnerSelectScalar = {
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    boardId?: boolean
    winPattern?: boolean
    place?: boolean
    wonAt?: boolean
  }

  export type WinnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "userId" | "boardId" | "winPattern" | "place" | "wonAt", ExtArgs["result"]["winner"]>
  export type WinnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }
  export type WinnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }
  export type WinnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    board?: boolean | PlayerBoardDefaultArgs<ExtArgs>
  }

  export type $WinnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Winner"
    objects: {
      session: Prisma.$GameSessionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      board: Prisma.$PlayerBoardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      userId: string
      boardId: string
      winPattern: string
      place: number
      wonAt: Date
    }, ExtArgs["result"]["winner"]>
    composites: {}
  }

  type WinnerGetPayload<S extends boolean | null | undefined | WinnerDefaultArgs> = $Result.GetResult<Prisma.$WinnerPayload, S>

  type WinnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WinnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WinnerCountAggregateInputType | true
    }

  export interface WinnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Winner'], meta: { name: 'Winner' } }
    /**
     * Find zero or one Winner that matches the filter.
     * @param {WinnerFindUniqueArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WinnerFindUniqueArgs>(args: SelectSubset<T, WinnerFindUniqueArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Winner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WinnerFindUniqueOrThrowArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WinnerFindUniqueOrThrowArgs>(args: SelectSubset<T, WinnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Winner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerFindFirstArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WinnerFindFirstArgs>(args?: SelectSubset<T, WinnerFindFirstArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Winner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerFindFirstOrThrowArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WinnerFindFirstOrThrowArgs>(args?: SelectSubset<T, WinnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Winners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Winners
     * const winners = await prisma.winner.findMany()
     * 
     * // Get first 10 Winners
     * const winners = await prisma.winner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const winnerWithIdOnly = await prisma.winner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WinnerFindManyArgs>(args?: SelectSubset<T, WinnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Winner.
     * @param {WinnerCreateArgs} args - Arguments to create a Winner.
     * @example
     * // Create one Winner
     * const Winner = await prisma.winner.create({
     *   data: {
     *     // ... data to create a Winner
     *   }
     * })
     * 
     */
    create<T extends WinnerCreateArgs>(args: SelectSubset<T, WinnerCreateArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Winners.
     * @param {WinnerCreateManyArgs} args - Arguments to create many Winners.
     * @example
     * // Create many Winners
     * const winner = await prisma.winner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WinnerCreateManyArgs>(args?: SelectSubset<T, WinnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Winners and returns the data saved in the database.
     * @param {WinnerCreateManyAndReturnArgs} args - Arguments to create many Winners.
     * @example
     * // Create many Winners
     * const winner = await prisma.winner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Winners and only return the `id`
     * const winnerWithIdOnly = await prisma.winner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WinnerCreateManyAndReturnArgs>(args?: SelectSubset<T, WinnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Winner.
     * @param {WinnerDeleteArgs} args - Arguments to delete one Winner.
     * @example
     * // Delete one Winner
     * const Winner = await prisma.winner.delete({
     *   where: {
     *     // ... filter to delete one Winner
     *   }
     * })
     * 
     */
    delete<T extends WinnerDeleteArgs>(args: SelectSubset<T, WinnerDeleteArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Winner.
     * @param {WinnerUpdateArgs} args - Arguments to update one Winner.
     * @example
     * // Update one Winner
     * const winner = await prisma.winner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WinnerUpdateArgs>(args: SelectSubset<T, WinnerUpdateArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Winners.
     * @param {WinnerDeleteManyArgs} args - Arguments to filter Winners to delete.
     * @example
     * // Delete a few Winners
     * const { count } = await prisma.winner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WinnerDeleteManyArgs>(args?: SelectSubset<T, WinnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Winners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Winners
     * const winner = await prisma.winner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WinnerUpdateManyArgs>(args: SelectSubset<T, WinnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Winners and returns the data updated in the database.
     * @param {WinnerUpdateManyAndReturnArgs} args - Arguments to update many Winners.
     * @example
     * // Update many Winners
     * const winner = await prisma.winner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Winners and only return the `id`
     * const winnerWithIdOnly = await prisma.winner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WinnerUpdateManyAndReturnArgs>(args: SelectSubset<T, WinnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Winner.
     * @param {WinnerUpsertArgs} args - Arguments to update or create a Winner.
     * @example
     * // Update or create a Winner
     * const winner = await prisma.winner.upsert({
     *   create: {
     *     // ... data to create a Winner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Winner we want to update
     *   }
     * })
     */
    upsert<T extends WinnerUpsertArgs>(args: SelectSubset<T, WinnerUpsertArgs<ExtArgs>>): Prisma__WinnerClient<$Result.GetResult<Prisma.$WinnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Winners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerCountArgs} args - Arguments to filter Winners to count.
     * @example
     * // Count the number of Winners
     * const count = await prisma.winner.count({
     *   where: {
     *     // ... the filter for the Winners we want to count
     *   }
     * })
    **/
    count<T extends WinnerCountArgs>(
      args?: Subset<T, WinnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WinnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Winner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WinnerAggregateArgs>(args: Subset<T, WinnerAggregateArgs>): Prisma.PrismaPromise<GetWinnerAggregateType<T>>

    /**
     * Group by Winner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WinnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WinnerGroupByArgs['orderBy'] }
        : { orderBy?: WinnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WinnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWinnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Winner model
   */
  readonly fields: WinnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Winner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WinnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends GameSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameSessionDefaultArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    board<T extends PlayerBoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerBoardDefaultArgs<ExtArgs>>): Prisma__PlayerBoardClient<$Result.GetResult<Prisma.$PlayerBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Winner model
   */
  interface WinnerFieldRefs {
    readonly id: FieldRef<"Winner", 'String'>
    readonly sessionId: FieldRef<"Winner", 'String'>
    readonly userId: FieldRef<"Winner", 'String'>
    readonly boardId: FieldRef<"Winner", 'String'>
    readonly winPattern: FieldRef<"Winner", 'String'>
    readonly place: FieldRef<"Winner", 'Int'>
    readonly wonAt: FieldRef<"Winner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Winner findUnique
   */
  export type WinnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter, which Winner to fetch.
     */
    where: WinnerWhereUniqueInput
  }

  /**
   * Winner findUniqueOrThrow
   */
  export type WinnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter, which Winner to fetch.
     */
    where: WinnerWhereUniqueInput
  }

  /**
   * Winner findFirst
   */
  export type WinnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter, which Winner to fetch.
     */
    where?: WinnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Winners to fetch.
     */
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Winners.
     */
    cursor?: WinnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Winners.
     */
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * Winner findFirstOrThrow
   */
  export type WinnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter, which Winner to fetch.
     */
    where?: WinnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Winners to fetch.
     */
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Winners.
     */
    cursor?: WinnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Winners.
     */
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * Winner findMany
   */
  export type WinnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter, which Winners to fetch.
     */
    where?: WinnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Winners to fetch.
     */
    orderBy?: WinnerOrderByWithRelationInput | WinnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Winners.
     */
    cursor?: WinnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Winners.
     */
    skip?: number
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * Winner create
   */
  export type WinnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * The data needed to create a Winner.
     */
    data: XOR<WinnerCreateInput, WinnerUncheckedCreateInput>
  }

  /**
   * Winner createMany
   */
  export type WinnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Winners.
     */
    data: WinnerCreateManyInput | WinnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Winner createManyAndReturn
   */
  export type WinnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * The data used to create many Winners.
     */
    data: WinnerCreateManyInput | WinnerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Winner update
   */
  export type WinnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * The data needed to update a Winner.
     */
    data: XOR<WinnerUpdateInput, WinnerUncheckedUpdateInput>
    /**
     * Choose, which Winner to update.
     */
    where: WinnerWhereUniqueInput
  }

  /**
   * Winner updateMany
   */
  export type WinnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Winners.
     */
    data: XOR<WinnerUpdateManyMutationInput, WinnerUncheckedUpdateManyInput>
    /**
     * Filter which Winners to update
     */
    where?: WinnerWhereInput
    /**
     * Limit how many Winners to update.
     */
    limit?: number
  }

  /**
   * Winner updateManyAndReturn
   */
  export type WinnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * The data used to update Winners.
     */
    data: XOR<WinnerUpdateManyMutationInput, WinnerUncheckedUpdateManyInput>
    /**
     * Filter which Winners to update
     */
    where?: WinnerWhereInput
    /**
     * Limit how many Winners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Winner upsert
   */
  export type WinnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * The filter to search for the Winner to update in case it exists.
     */
    where: WinnerWhereUniqueInput
    /**
     * In case the Winner found by the `where` argument doesn't exist, create a new Winner with this data.
     */
    create: XOR<WinnerCreateInput, WinnerUncheckedCreateInput>
    /**
     * In case the Winner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WinnerUpdateInput, WinnerUncheckedUpdateInput>
  }

  /**
   * Winner delete
   */
  export type WinnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
    /**
     * Filter which Winner to delete.
     */
    where: WinnerWhereUniqueInput
  }

  /**
   * Winner deleteMany
   */
  export type WinnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Winners to delete
     */
    where?: WinnerWhereInput
    /**
     * Limit how many Winners to delete.
     */
    limit?: number
  }

  /**
   * Winner without action
   */
  export type WinnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Winner
     */
    select?: WinnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Winner
     */
    omit?: WinnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WinnerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    email: 'email',
    name: 'name',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const GameSessionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    status: 'status',
    revealInterval: 'revealInterval',
    currentRevealIndex: 'currentRevealIndex',
    maxReveals: 'maxReveals',
    createdById: 'createdById',
    startedAt: 'startedAt',
    endedAt: 'endedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameSessionScalarFieldEnum = (typeof GameSessionScalarFieldEnum)[keyof typeof GameSessionScalarFieldEnum]


  export const PlayerBoardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionId: 'sessionId',
    boardLayout: 'boardLayout',
    isReady: 'isReady',
    joinedAt: 'joinedAt',
    updatedAt: 'updatedAt'
  };

  export type PlayerBoardScalarFieldEnum = (typeof PlayerBoardScalarFieldEnum)[keyof typeof PlayerBoardScalarFieldEnum]


  export const PlayerBoardLocationScalarFieldEnum: {
    id: 'id',
    boardId: 'boardId',
    locationId: 'locationId',
    position: 'position',
    isSelected: 'isSelected'
  };

  export type PlayerBoardLocationScalarFieldEnum = (typeof PlayerBoardLocationScalarFieldEnum)[keyof typeof PlayerBoardLocationScalarFieldEnum]


  export const RevealedLocationScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    locationId: 'locationId',
    revealIndex: 'revealIndex',
    revealedAt: 'revealedAt'
  };

  export type RevealedLocationScalarFieldEnum = (typeof RevealedLocationScalarFieldEnum)[keyof typeof RevealedLocationScalarFieldEnum]


  export const WinnerScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    userId: 'userId',
    boardId: 'boardId',
    winPattern: 'winPattern',
    place: 'place',
    wonAt: 'wonAt'
  };

  export type WinnerScalarFieldEnum = (typeof WinnerScalarFieldEnum)[keyof typeof WinnerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'GameStatus'
   */
  export type EnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus'>
    


  /**
   * Reference to a field of type 'GameStatus[]'
   */
  export type ListEnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdSessions?: GameSessionListRelationFilter
    playerBoards?: PlayerBoardListRelationFilter
    wins?: WinnerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdSessions?: GameSessionOrderByRelationAggregateInput
    playerBoards?: PlayerBoardOrderByRelationAggregateInput
    wins?: WinnerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdSessions?: GameSessionListRelationFilter
    playerBoards?: PlayerBoardListRelationFilter
    wins?: WinnerListRelationFilter
  }, "id" | "clerkId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    imageUrl?: StringNullableFilter<"Location"> | string | null
    category?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    playerBoards?: PlayerBoardLocationListRelationFilter
    revealedLocations?: RevealedLocationListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playerBoards?: PlayerBoardLocationOrderByRelationAggregateInput
    revealedLocations?: RevealedLocationOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    description?: StringNullableFilter<"Location"> | string | null
    imageUrl?: StringNullableFilter<"Location"> | string | null
    category?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    playerBoards?: PlayerBoardLocationListRelationFilter
    revealedLocations?: RevealedLocationListRelationFilter
  }, "id" | "name">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Location"> | string | null
    category?: StringNullableWithAggregatesFilter<"Location"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type GameSessionWhereInput = {
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    id?: StringFilter<"GameSession"> | string
    code?: StringFilter<"GameSession"> | string
    status?: EnumGameStatusFilter<"GameSession"> | $Enums.GameStatus
    revealInterval?: IntFilter<"GameSession"> | number
    currentRevealIndex?: IntFilter<"GameSession"> | number
    maxReveals?: IntFilter<"GameSession"> | number
    createdById?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    playerBoards?: PlayerBoardListRelationFilter
    revealedLocations?: RevealedLocationListRelationFilter
    winners?: WinnerListRelationFilter
  }

  export type GameSessionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    status?: SortOrder
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
    createdById?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    playerBoards?: PlayerBoardOrderByRelationAggregateInput
    revealedLocations?: RevealedLocationOrderByRelationAggregateInput
    winners?: WinnerOrderByRelationAggregateInput
  }

  export type GameSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    status?: EnumGameStatusFilter<"GameSession"> | $Enums.GameStatus
    revealInterval?: IntFilter<"GameSession"> | number
    currentRevealIndex?: IntFilter<"GameSession"> | number
    maxReveals?: IntFilter<"GameSession"> | number
    createdById?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    playerBoards?: PlayerBoardListRelationFilter
    revealedLocations?: RevealedLocationListRelationFilter
    winners?: WinnerListRelationFilter
  }, "id" | "code">

  export type GameSessionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    status?: SortOrder
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
    createdById?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameSessionCountOrderByAggregateInput
    _avg?: GameSessionAvgOrderByAggregateInput
    _max?: GameSessionMaxOrderByAggregateInput
    _min?: GameSessionMinOrderByAggregateInput
    _sum?: GameSessionSumOrderByAggregateInput
  }

  export type GameSessionScalarWhereWithAggregatesInput = {
    AND?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    OR?: GameSessionScalarWhereWithAggregatesInput[]
    NOT?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameSession"> | string
    code?: StringWithAggregatesFilter<"GameSession"> | string
    status?: EnumGameStatusWithAggregatesFilter<"GameSession"> | $Enums.GameStatus
    revealInterval?: IntWithAggregatesFilter<"GameSession"> | number
    currentRevealIndex?: IntWithAggregatesFilter<"GameSession"> | number
    maxReveals?: IntWithAggregatesFilter<"GameSession"> | number
    createdById?: StringWithAggregatesFilter<"GameSession"> | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
  }

  export type PlayerBoardWhereInput = {
    AND?: PlayerBoardWhereInput | PlayerBoardWhereInput[]
    OR?: PlayerBoardWhereInput[]
    NOT?: PlayerBoardWhereInput | PlayerBoardWhereInput[]
    id?: StringFilter<"PlayerBoard"> | string
    userId?: StringFilter<"PlayerBoard"> | string
    sessionId?: StringFilter<"PlayerBoard"> | string
    boardLayout?: JsonFilter<"PlayerBoard">
    isReady?: BoolFilter<"PlayerBoard"> | boolean
    joinedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    locations?: PlayerBoardLocationListRelationFilter
    wins?: WinnerListRelationFilter
  }

  export type PlayerBoardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    boardLayout?: SortOrder
    isReady?: SortOrder
    joinedAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    session?: GameSessionOrderByWithRelationInput
    locations?: PlayerBoardLocationOrderByRelationAggregateInput
    wins?: WinnerOrderByRelationAggregateInput
  }

  export type PlayerBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_sessionId?: PlayerBoardUserIdSessionIdCompoundUniqueInput
    AND?: PlayerBoardWhereInput | PlayerBoardWhereInput[]
    OR?: PlayerBoardWhereInput[]
    NOT?: PlayerBoardWhereInput | PlayerBoardWhereInput[]
    userId?: StringFilter<"PlayerBoard"> | string
    sessionId?: StringFilter<"PlayerBoard"> | string
    boardLayout?: JsonFilter<"PlayerBoard">
    isReady?: BoolFilter<"PlayerBoard"> | boolean
    joinedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    locations?: PlayerBoardLocationListRelationFilter
    wins?: WinnerListRelationFilter
  }, "id" | "userId_sessionId">

  export type PlayerBoardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    boardLayout?: SortOrder
    isReady?: SortOrder
    joinedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlayerBoardCountOrderByAggregateInput
    _max?: PlayerBoardMaxOrderByAggregateInput
    _min?: PlayerBoardMinOrderByAggregateInput
  }

  export type PlayerBoardScalarWhereWithAggregatesInput = {
    AND?: PlayerBoardScalarWhereWithAggregatesInput | PlayerBoardScalarWhereWithAggregatesInput[]
    OR?: PlayerBoardScalarWhereWithAggregatesInput[]
    NOT?: PlayerBoardScalarWhereWithAggregatesInput | PlayerBoardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerBoard"> | string
    userId?: StringWithAggregatesFilter<"PlayerBoard"> | string
    sessionId?: StringWithAggregatesFilter<"PlayerBoard"> | string
    boardLayout?: JsonWithAggregatesFilter<"PlayerBoard">
    isReady?: BoolWithAggregatesFilter<"PlayerBoard"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"PlayerBoard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlayerBoard"> | Date | string
  }

  export type PlayerBoardLocationWhereInput = {
    AND?: PlayerBoardLocationWhereInput | PlayerBoardLocationWhereInput[]
    OR?: PlayerBoardLocationWhereInput[]
    NOT?: PlayerBoardLocationWhereInput | PlayerBoardLocationWhereInput[]
    id?: StringFilter<"PlayerBoardLocation"> | string
    boardId?: StringFilter<"PlayerBoardLocation"> | string
    locationId?: StringFilter<"PlayerBoardLocation"> | string
    position?: IntFilter<"PlayerBoardLocation"> | number
    isSelected?: BoolFilter<"PlayerBoardLocation"> | boolean
    board?: XOR<PlayerBoardScalarRelationFilter, PlayerBoardWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type PlayerBoardLocationOrderByWithRelationInput = {
    id?: SortOrder
    boardId?: SortOrder
    locationId?: SortOrder
    position?: SortOrder
    isSelected?: SortOrder
    board?: PlayerBoardOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type PlayerBoardLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    boardId_position?: PlayerBoardLocationBoardIdPositionCompoundUniqueInput
    AND?: PlayerBoardLocationWhereInput | PlayerBoardLocationWhereInput[]
    OR?: PlayerBoardLocationWhereInput[]
    NOT?: PlayerBoardLocationWhereInput | PlayerBoardLocationWhereInput[]
    boardId?: StringFilter<"PlayerBoardLocation"> | string
    locationId?: StringFilter<"PlayerBoardLocation"> | string
    position?: IntFilter<"PlayerBoardLocation"> | number
    isSelected?: BoolFilter<"PlayerBoardLocation"> | boolean
    board?: XOR<PlayerBoardScalarRelationFilter, PlayerBoardWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "boardId_position">

  export type PlayerBoardLocationOrderByWithAggregationInput = {
    id?: SortOrder
    boardId?: SortOrder
    locationId?: SortOrder
    position?: SortOrder
    isSelected?: SortOrder
    _count?: PlayerBoardLocationCountOrderByAggregateInput
    _avg?: PlayerBoardLocationAvgOrderByAggregateInput
    _max?: PlayerBoardLocationMaxOrderByAggregateInput
    _min?: PlayerBoardLocationMinOrderByAggregateInput
    _sum?: PlayerBoardLocationSumOrderByAggregateInput
  }

  export type PlayerBoardLocationScalarWhereWithAggregatesInput = {
    AND?: PlayerBoardLocationScalarWhereWithAggregatesInput | PlayerBoardLocationScalarWhereWithAggregatesInput[]
    OR?: PlayerBoardLocationScalarWhereWithAggregatesInput[]
    NOT?: PlayerBoardLocationScalarWhereWithAggregatesInput | PlayerBoardLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerBoardLocation"> | string
    boardId?: StringWithAggregatesFilter<"PlayerBoardLocation"> | string
    locationId?: StringWithAggregatesFilter<"PlayerBoardLocation"> | string
    position?: IntWithAggregatesFilter<"PlayerBoardLocation"> | number
    isSelected?: BoolWithAggregatesFilter<"PlayerBoardLocation"> | boolean
  }

  export type RevealedLocationWhereInput = {
    AND?: RevealedLocationWhereInput | RevealedLocationWhereInput[]
    OR?: RevealedLocationWhereInput[]
    NOT?: RevealedLocationWhereInput | RevealedLocationWhereInput[]
    id?: StringFilter<"RevealedLocation"> | string
    sessionId?: StringFilter<"RevealedLocation"> | string
    locationId?: StringFilter<"RevealedLocation"> | string
    revealIndex?: IntFilter<"RevealedLocation"> | number
    revealedAt?: DateTimeFilter<"RevealedLocation"> | Date | string
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type RevealedLocationOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    revealIndex?: SortOrder
    revealedAt?: SortOrder
    session?: GameSessionOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type RevealedLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_revealIndex?: RevealedLocationSessionIdRevealIndexCompoundUniqueInput
    AND?: RevealedLocationWhereInput | RevealedLocationWhereInput[]
    OR?: RevealedLocationWhereInput[]
    NOT?: RevealedLocationWhereInput | RevealedLocationWhereInput[]
    sessionId?: StringFilter<"RevealedLocation"> | string
    locationId?: StringFilter<"RevealedLocation"> | string
    revealIndex?: IntFilter<"RevealedLocation"> | number
    revealedAt?: DateTimeFilter<"RevealedLocation"> | Date | string
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "sessionId_revealIndex">

  export type RevealedLocationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    revealIndex?: SortOrder
    revealedAt?: SortOrder
    _count?: RevealedLocationCountOrderByAggregateInput
    _avg?: RevealedLocationAvgOrderByAggregateInput
    _max?: RevealedLocationMaxOrderByAggregateInput
    _min?: RevealedLocationMinOrderByAggregateInput
    _sum?: RevealedLocationSumOrderByAggregateInput
  }

  export type RevealedLocationScalarWhereWithAggregatesInput = {
    AND?: RevealedLocationScalarWhereWithAggregatesInput | RevealedLocationScalarWhereWithAggregatesInput[]
    OR?: RevealedLocationScalarWhereWithAggregatesInput[]
    NOT?: RevealedLocationScalarWhereWithAggregatesInput | RevealedLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RevealedLocation"> | string
    sessionId?: StringWithAggregatesFilter<"RevealedLocation"> | string
    locationId?: StringWithAggregatesFilter<"RevealedLocation"> | string
    revealIndex?: IntWithAggregatesFilter<"RevealedLocation"> | number
    revealedAt?: DateTimeWithAggregatesFilter<"RevealedLocation"> | Date | string
  }

  export type WinnerWhereInput = {
    AND?: WinnerWhereInput | WinnerWhereInput[]
    OR?: WinnerWhereInput[]
    NOT?: WinnerWhereInput | WinnerWhereInput[]
    id?: StringFilter<"Winner"> | string
    sessionId?: StringFilter<"Winner"> | string
    userId?: StringFilter<"Winner"> | string
    boardId?: StringFilter<"Winner"> | string
    winPattern?: StringFilter<"Winner"> | string
    place?: IntFilter<"Winner"> | number
    wonAt?: DateTimeFilter<"Winner"> | Date | string
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    board?: XOR<PlayerBoardScalarRelationFilter, PlayerBoardWhereInput>
  }

  export type WinnerOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    winPattern?: SortOrder
    place?: SortOrder
    wonAt?: SortOrder
    session?: GameSessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    board?: PlayerBoardOrderByWithRelationInput
  }

  export type WinnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_place?: WinnerSessionIdPlaceCompoundUniqueInput
    AND?: WinnerWhereInput | WinnerWhereInput[]
    OR?: WinnerWhereInput[]
    NOT?: WinnerWhereInput | WinnerWhereInput[]
    sessionId?: StringFilter<"Winner"> | string
    userId?: StringFilter<"Winner"> | string
    boardId?: StringFilter<"Winner"> | string
    winPattern?: StringFilter<"Winner"> | string
    place?: IntFilter<"Winner"> | number
    wonAt?: DateTimeFilter<"Winner"> | Date | string
    session?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    board?: XOR<PlayerBoardScalarRelationFilter, PlayerBoardWhereInput>
  }, "id" | "sessionId_place">

  export type WinnerOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    winPattern?: SortOrder
    place?: SortOrder
    wonAt?: SortOrder
    _count?: WinnerCountOrderByAggregateInput
    _avg?: WinnerAvgOrderByAggregateInput
    _max?: WinnerMaxOrderByAggregateInput
    _min?: WinnerMinOrderByAggregateInput
    _sum?: WinnerSumOrderByAggregateInput
  }

  export type WinnerScalarWhereWithAggregatesInput = {
    AND?: WinnerScalarWhereWithAggregatesInput | WinnerScalarWhereWithAggregatesInput[]
    OR?: WinnerScalarWhereWithAggregatesInput[]
    NOT?: WinnerScalarWhereWithAggregatesInput | WinnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Winner"> | string
    sessionId?: StringWithAggregatesFilter<"Winner"> | string
    userId?: StringWithAggregatesFilter<"Winner"> | string
    boardId?: StringWithAggregatesFilter<"Winner"> | string
    winPattern?: StringWithAggregatesFilter<"Winner"> | string
    place?: IntWithAggregatesFilter<"Winner"> | number
    wonAt?: DateTimeWithAggregatesFilter<"Winner"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionCreateNestedManyWithoutCreatedByInput
    playerBoards?: PlayerBoardCreateNestedManyWithoutUserInput
    wins?: WinnerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionUncheckedCreateNestedManyWithoutCreatedByInput
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutUserInput
    wins?: WinnerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUpdateManyWithoutCreatedByNestedInput
    playerBoards?: PlayerBoardUpdateManyWithoutUserNestedInput
    wins?: WinnerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutUserNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardLocationCreateNestedManyWithoutLocationInput
    revealedLocations?: RevealedLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardLocationUncheckedCreateNestedManyWithoutLocationInput
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardLocationUpdateManyWithoutLocationNestedInput
    revealedLocations?: RevealedLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardLocationUncheckedUpdateManyWithoutLocationNestedInput
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSessionCreateInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedSessionsInput
    playerBoards?: PlayerBoardCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationCreateNestedManyWithoutSessionInput
    winners?: WinnerCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    createdById: string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutSessionInput
    winners?: WinnerUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSessionsNestedInput
    playerBoards?: PlayerBoardUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUpdateManyWithoutSessionNestedInput
    winners?: WinnerUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutSessionNestedInput
    winners?: WinnerUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionCreateManyInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    createdById: string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardCreateInput = {
    id?: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlayerBoardsInput
    session: GameSessionCreateNestedOneWithoutPlayerBoardsInput
    locations?: PlayerBoardLocationCreateNestedManyWithoutBoardInput
    wins?: WinnerCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUncheckedCreateInput = {
    id?: string
    userId: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    locations?: PlayerBoardLocationUncheckedCreateNestedManyWithoutBoardInput
    wins?: WinnerUncheckedCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlayerBoardsNestedInput
    session?: GameSessionUpdateOneRequiredWithoutPlayerBoardsNestedInput
    locations?: PlayerBoardLocationUpdateManyWithoutBoardNestedInput
    wins?: WinnerUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: PlayerBoardLocationUncheckedUpdateManyWithoutBoardNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardCreateManyInput = {
    id?: string
    userId: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerBoardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardLocationCreateInput = {
    id?: string
    position: number
    isSelected?: boolean
    board: PlayerBoardCreateNestedOneWithoutLocationsInput
    location: LocationCreateNestedOneWithoutPlayerBoardsInput
  }

  export type PlayerBoardLocationUncheckedCreateInput = {
    id?: string
    boardId: string
    locationId: string
    position: number
    isSelected?: boolean
  }

  export type PlayerBoardLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    board?: PlayerBoardUpdateOneRequiredWithoutLocationsNestedInput
    location?: LocationUpdateOneRequiredWithoutPlayerBoardsNestedInput
  }

  export type PlayerBoardLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerBoardLocationCreateManyInput = {
    id?: string
    boardId: string
    locationId: string
    position: number
    isSelected?: boolean
  }

  export type PlayerBoardLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerBoardLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RevealedLocationCreateInput = {
    id?: string
    revealIndex: number
    revealedAt?: Date | string
    session: GameSessionCreateNestedOneWithoutRevealedLocationsInput
    location: LocationCreateNestedOneWithoutRevealedLocationsInput
  }

  export type RevealedLocationUncheckedCreateInput = {
    id?: string
    sessionId: string
    locationId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type RevealedLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutRevealedLocationsNestedInput
    location?: LocationUpdateOneRequiredWithoutRevealedLocationsNestedInput
  }

  export type RevealedLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevealedLocationCreateManyInput = {
    id?: string
    sessionId: string
    locationId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type RevealedLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevealedLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerCreateInput = {
    id?: string
    winPattern: string
    place: number
    wonAt?: Date | string
    session: GameSessionCreateNestedOneWithoutWinnersInput
    user: UserCreateNestedOneWithoutWinsInput
    board: PlayerBoardCreateNestedOneWithoutWinsInput
  }

  export type WinnerUncheckedCreateInput = {
    id?: string
    sessionId: string
    userId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type WinnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutWinnersNestedInput
    user?: UserUpdateOneRequiredWithoutWinsNestedInput
    board?: PlayerBoardUpdateOneRequiredWithoutWinsNestedInput
  }

  export type WinnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerCreateManyInput = {
    id?: string
    sessionId: string
    userId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type WinnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GameSessionListRelationFilter = {
    every?: GameSessionWhereInput
    some?: GameSessionWhereInput
    none?: GameSessionWhereInput
  }

  export type PlayerBoardListRelationFilter = {
    every?: PlayerBoardWhereInput
    some?: PlayerBoardWhereInput
    none?: PlayerBoardWhereInput
  }

  export type WinnerListRelationFilter = {
    every?: WinnerWhereInput
    some?: WinnerWhereInput
    none?: WinnerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerBoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WinnerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PlayerBoardLocationListRelationFilter = {
    every?: PlayerBoardLocationWhereInput
    some?: PlayerBoardLocationWhereInput
    none?: PlayerBoardLocationWhereInput
  }

  export type RevealedLocationListRelationFilter = {
    every?: RevealedLocationWhereInput
    some?: RevealedLocationWhereInput
    none?: RevealedLocationWhereInput
  }

  export type PlayerBoardLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RevealedLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameSessionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    status?: SortOrder
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
    createdById?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSessionAvgOrderByAggregateInput = {
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
  }

  export type GameSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    status?: SortOrder
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
    createdById?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSessionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    status?: SortOrder
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
    createdById?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSessionSumOrderByAggregateInput = {
    revealInterval?: SortOrder
    currentRevealIndex?: SortOrder
    maxReveals?: SortOrder
  }

  export type EnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GameSessionScalarRelationFilter = {
    is?: GameSessionWhereInput
    isNot?: GameSessionWhereInput
  }

  export type PlayerBoardUserIdSessionIdCompoundUniqueInput = {
    userId: string
    sessionId: string
  }

  export type PlayerBoardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    boardLayout?: SortOrder
    isReady?: SortOrder
    joinedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    isReady?: SortOrder
    joinedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerBoardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    isReady?: SortOrder
    joinedAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PlayerBoardScalarRelationFilter = {
    is?: PlayerBoardWhereInput
    isNot?: PlayerBoardWhereInput
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type PlayerBoardLocationBoardIdPositionCompoundUniqueInput = {
    boardId: string
    position: number
  }

  export type PlayerBoardLocationCountOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    locationId?: SortOrder
    position?: SortOrder
    isSelected?: SortOrder
  }

  export type PlayerBoardLocationAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type PlayerBoardLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    locationId?: SortOrder
    position?: SortOrder
    isSelected?: SortOrder
  }

  export type PlayerBoardLocationMinOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    locationId?: SortOrder
    position?: SortOrder
    isSelected?: SortOrder
  }

  export type PlayerBoardLocationSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type RevealedLocationSessionIdRevealIndexCompoundUniqueInput = {
    sessionId: string
    revealIndex: number
  }

  export type RevealedLocationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    revealIndex?: SortOrder
    revealedAt?: SortOrder
  }

  export type RevealedLocationAvgOrderByAggregateInput = {
    revealIndex?: SortOrder
  }

  export type RevealedLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    revealIndex?: SortOrder
    revealedAt?: SortOrder
  }

  export type RevealedLocationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    revealIndex?: SortOrder
    revealedAt?: SortOrder
  }

  export type RevealedLocationSumOrderByAggregateInput = {
    revealIndex?: SortOrder
  }

  export type WinnerSessionIdPlaceCompoundUniqueInput = {
    sessionId: string
    place: number
  }

  export type WinnerCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    winPattern?: SortOrder
    place?: SortOrder
    wonAt?: SortOrder
  }

  export type WinnerAvgOrderByAggregateInput = {
    place?: SortOrder
  }

  export type WinnerMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    winPattern?: SortOrder
    place?: SortOrder
    wonAt?: SortOrder
  }

  export type WinnerMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    winPattern?: SortOrder
    place?: SortOrder
    wonAt?: SortOrder
  }

  export type WinnerSumOrderByAggregateInput = {
    place?: SortOrder
  }

  export type GameSessionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput> | GameSessionCreateWithoutCreatedByInput[] | GameSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCreatedByInput | GameSessionCreateOrConnectWithoutCreatedByInput[]
    createMany?: GameSessionCreateManyCreatedByInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type PlayerBoardCreateNestedManyWithoutUserInput = {
    create?: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput> | PlayerBoardCreateWithoutUserInput[] | PlayerBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutUserInput | PlayerBoardCreateOrConnectWithoutUserInput[]
    createMany?: PlayerBoardCreateManyUserInputEnvelope
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
  }

  export type WinnerCreateNestedManyWithoutUserInput = {
    create?: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput> | WinnerCreateWithoutUserInput[] | WinnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutUserInput | WinnerCreateOrConnectWithoutUserInput[]
    createMany?: WinnerCreateManyUserInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type GameSessionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput> | GameSessionCreateWithoutCreatedByInput[] | GameSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCreatedByInput | GameSessionCreateOrConnectWithoutCreatedByInput[]
    createMany?: GameSessionCreateManyCreatedByInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type PlayerBoardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput> | PlayerBoardCreateWithoutUserInput[] | PlayerBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutUserInput | PlayerBoardCreateOrConnectWithoutUserInput[]
    createMany?: PlayerBoardCreateManyUserInputEnvelope
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
  }

  export type WinnerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput> | WinnerCreateWithoutUserInput[] | WinnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutUserInput | WinnerCreateOrConnectWithoutUserInput[]
    createMany?: WinnerCreateManyUserInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GameSessionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput> | GameSessionCreateWithoutCreatedByInput[] | GameSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCreatedByInput | GameSessionCreateOrConnectWithoutCreatedByInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutCreatedByInput | GameSessionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GameSessionCreateManyCreatedByInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutCreatedByInput | GameSessionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutCreatedByInput | GameSessionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type PlayerBoardUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput> | PlayerBoardCreateWithoutUserInput[] | PlayerBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutUserInput | PlayerBoardCreateOrConnectWithoutUserInput[]
    upsert?: PlayerBoardUpsertWithWhereUniqueWithoutUserInput | PlayerBoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlayerBoardCreateManyUserInputEnvelope
    set?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    disconnect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    delete?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    update?: PlayerBoardUpdateWithWhereUniqueWithoutUserInput | PlayerBoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlayerBoardUpdateManyWithWhereWithoutUserInput | PlayerBoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
  }

  export type WinnerUpdateManyWithoutUserNestedInput = {
    create?: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput> | WinnerCreateWithoutUserInput[] | WinnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutUserInput | WinnerCreateOrConnectWithoutUserInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutUserInput | WinnerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WinnerCreateManyUserInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutUserInput | WinnerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutUserInput | WinnerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type GameSessionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput> | GameSessionCreateWithoutCreatedByInput[] | GameSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCreatedByInput | GameSessionCreateOrConnectWithoutCreatedByInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutCreatedByInput | GameSessionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GameSessionCreateManyCreatedByInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutCreatedByInput | GameSessionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutCreatedByInput | GameSessionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type PlayerBoardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput> | PlayerBoardCreateWithoutUserInput[] | PlayerBoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutUserInput | PlayerBoardCreateOrConnectWithoutUserInput[]
    upsert?: PlayerBoardUpsertWithWhereUniqueWithoutUserInput | PlayerBoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlayerBoardCreateManyUserInputEnvelope
    set?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    disconnect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    delete?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    update?: PlayerBoardUpdateWithWhereUniqueWithoutUserInput | PlayerBoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlayerBoardUpdateManyWithWhereWithoutUserInput | PlayerBoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
  }

  export type WinnerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput> | WinnerCreateWithoutUserInput[] | WinnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutUserInput | WinnerCreateOrConnectWithoutUserInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutUserInput | WinnerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WinnerCreateManyUserInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutUserInput | WinnerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutUserInput | WinnerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type PlayerBoardLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput> | PlayerBoardLocationCreateWithoutLocationInput[] | PlayerBoardLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutLocationInput | PlayerBoardLocationCreateOrConnectWithoutLocationInput[]
    createMany?: PlayerBoardLocationCreateManyLocationInputEnvelope
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
  }

  export type RevealedLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput> | RevealedLocationCreateWithoutLocationInput[] | RevealedLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutLocationInput | RevealedLocationCreateOrConnectWithoutLocationInput[]
    createMany?: RevealedLocationCreateManyLocationInputEnvelope
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
  }

  export type PlayerBoardLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput> | PlayerBoardLocationCreateWithoutLocationInput[] | PlayerBoardLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutLocationInput | PlayerBoardLocationCreateOrConnectWithoutLocationInput[]
    createMany?: PlayerBoardLocationCreateManyLocationInputEnvelope
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
  }

  export type RevealedLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput> | RevealedLocationCreateWithoutLocationInput[] | RevealedLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutLocationInput | RevealedLocationCreateOrConnectWithoutLocationInput[]
    createMany?: RevealedLocationCreateManyLocationInputEnvelope
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
  }

  export type PlayerBoardLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput> | PlayerBoardLocationCreateWithoutLocationInput[] | PlayerBoardLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutLocationInput | PlayerBoardLocationCreateOrConnectWithoutLocationInput[]
    upsert?: PlayerBoardLocationUpsertWithWhereUniqueWithoutLocationInput | PlayerBoardLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PlayerBoardLocationCreateManyLocationInputEnvelope
    set?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    disconnect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    delete?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    update?: PlayerBoardLocationUpdateWithWhereUniqueWithoutLocationInput | PlayerBoardLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PlayerBoardLocationUpdateManyWithWhereWithoutLocationInput | PlayerBoardLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
  }

  export type RevealedLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput> | RevealedLocationCreateWithoutLocationInput[] | RevealedLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutLocationInput | RevealedLocationCreateOrConnectWithoutLocationInput[]
    upsert?: RevealedLocationUpsertWithWhereUniqueWithoutLocationInput | RevealedLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RevealedLocationCreateManyLocationInputEnvelope
    set?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    disconnect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    delete?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    update?: RevealedLocationUpdateWithWhereUniqueWithoutLocationInput | RevealedLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RevealedLocationUpdateManyWithWhereWithoutLocationInput | RevealedLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
  }

  export type PlayerBoardLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput> | PlayerBoardLocationCreateWithoutLocationInput[] | PlayerBoardLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutLocationInput | PlayerBoardLocationCreateOrConnectWithoutLocationInput[]
    upsert?: PlayerBoardLocationUpsertWithWhereUniqueWithoutLocationInput | PlayerBoardLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PlayerBoardLocationCreateManyLocationInputEnvelope
    set?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    disconnect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    delete?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    update?: PlayerBoardLocationUpdateWithWhereUniqueWithoutLocationInput | PlayerBoardLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PlayerBoardLocationUpdateManyWithWhereWithoutLocationInput | PlayerBoardLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
  }

  export type RevealedLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput> | RevealedLocationCreateWithoutLocationInput[] | RevealedLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutLocationInput | RevealedLocationCreateOrConnectWithoutLocationInput[]
    upsert?: RevealedLocationUpsertWithWhereUniqueWithoutLocationInput | RevealedLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RevealedLocationCreateManyLocationInputEnvelope
    set?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    disconnect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    delete?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    update?: RevealedLocationUpdateWithWhereUniqueWithoutLocationInput | RevealedLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RevealedLocationUpdateManyWithWhereWithoutLocationInput | RevealedLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedSessionsInput = {
    create?: XOR<UserCreateWithoutCreatedSessionsInput, UserUncheckedCreateWithoutCreatedSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type PlayerBoardCreateNestedManyWithoutSessionInput = {
    create?: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput> | PlayerBoardCreateWithoutSessionInput[] | PlayerBoardUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutSessionInput | PlayerBoardCreateOrConnectWithoutSessionInput[]
    createMany?: PlayerBoardCreateManySessionInputEnvelope
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
  }

  export type RevealedLocationCreateNestedManyWithoutSessionInput = {
    create?: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput> | RevealedLocationCreateWithoutSessionInput[] | RevealedLocationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutSessionInput | RevealedLocationCreateOrConnectWithoutSessionInput[]
    createMany?: RevealedLocationCreateManySessionInputEnvelope
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
  }

  export type WinnerCreateNestedManyWithoutSessionInput = {
    create?: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput> | WinnerCreateWithoutSessionInput[] | WinnerUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutSessionInput | WinnerCreateOrConnectWithoutSessionInput[]
    createMany?: WinnerCreateManySessionInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type PlayerBoardUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput> | PlayerBoardCreateWithoutSessionInput[] | PlayerBoardUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutSessionInput | PlayerBoardCreateOrConnectWithoutSessionInput[]
    createMany?: PlayerBoardCreateManySessionInputEnvelope
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
  }

  export type RevealedLocationUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput> | RevealedLocationCreateWithoutSessionInput[] | RevealedLocationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutSessionInput | RevealedLocationCreateOrConnectWithoutSessionInput[]
    createMany?: RevealedLocationCreateManySessionInputEnvelope
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
  }

  export type WinnerUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput> | WinnerCreateWithoutSessionInput[] | WinnerUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutSessionInput | WinnerCreateOrConnectWithoutSessionInput[]
    createMany?: WinnerCreateManySessionInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type EnumGameStatusFieldUpdateOperationsInput = {
    set?: $Enums.GameStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutCreatedSessionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSessionsInput, UserUncheckedCreateWithoutCreatedSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSessionsInput
    upsert?: UserUpsertWithoutCreatedSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSessionsInput, UserUpdateWithoutCreatedSessionsInput>, UserUncheckedUpdateWithoutCreatedSessionsInput>
  }

  export type PlayerBoardUpdateManyWithoutSessionNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput> | PlayerBoardCreateWithoutSessionInput[] | PlayerBoardUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutSessionInput | PlayerBoardCreateOrConnectWithoutSessionInput[]
    upsert?: PlayerBoardUpsertWithWhereUniqueWithoutSessionInput | PlayerBoardUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: PlayerBoardCreateManySessionInputEnvelope
    set?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    disconnect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    delete?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    update?: PlayerBoardUpdateWithWhereUniqueWithoutSessionInput | PlayerBoardUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: PlayerBoardUpdateManyWithWhereWithoutSessionInput | PlayerBoardUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
  }

  export type RevealedLocationUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput> | RevealedLocationCreateWithoutSessionInput[] | RevealedLocationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutSessionInput | RevealedLocationCreateOrConnectWithoutSessionInput[]
    upsert?: RevealedLocationUpsertWithWhereUniqueWithoutSessionInput | RevealedLocationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RevealedLocationCreateManySessionInputEnvelope
    set?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    disconnect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    delete?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    update?: RevealedLocationUpdateWithWhereUniqueWithoutSessionInput | RevealedLocationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RevealedLocationUpdateManyWithWhereWithoutSessionInput | RevealedLocationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
  }

  export type WinnerUpdateManyWithoutSessionNestedInput = {
    create?: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput> | WinnerCreateWithoutSessionInput[] | WinnerUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutSessionInput | WinnerCreateOrConnectWithoutSessionInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutSessionInput | WinnerUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: WinnerCreateManySessionInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutSessionInput | WinnerUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutSessionInput | WinnerUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type PlayerBoardUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput> | PlayerBoardCreateWithoutSessionInput[] | PlayerBoardUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutSessionInput | PlayerBoardCreateOrConnectWithoutSessionInput[]
    upsert?: PlayerBoardUpsertWithWhereUniqueWithoutSessionInput | PlayerBoardUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: PlayerBoardCreateManySessionInputEnvelope
    set?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    disconnect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    delete?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    connect?: PlayerBoardWhereUniqueInput | PlayerBoardWhereUniqueInput[]
    update?: PlayerBoardUpdateWithWhereUniqueWithoutSessionInput | PlayerBoardUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: PlayerBoardUpdateManyWithWhereWithoutSessionInput | PlayerBoardUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
  }

  export type RevealedLocationUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput> | RevealedLocationCreateWithoutSessionInput[] | RevealedLocationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RevealedLocationCreateOrConnectWithoutSessionInput | RevealedLocationCreateOrConnectWithoutSessionInput[]
    upsert?: RevealedLocationUpsertWithWhereUniqueWithoutSessionInput | RevealedLocationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RevealedLocationCreateManySessionInputEnvelope
    set?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    disconnect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    delete?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    connect?: RevealedLocationWhereUniqueInput | RevealedLocationWhereUniqueInput[]
    update?: RevealedLocationUpdateWithWhereUniqueWithoutSessionInput | RevealedLocationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RevealedLocationUpdateManyWithWhereWithoutSessionInput | RevealedLocationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
  }

  export type WinnerUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput> | WinnerCreateWithoutSessionInput[] | WinnerUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutSessionInput | WinnerCreateOrConnectWithoutSessionInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutSessionInput | WinnerUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: WinnerCreateManySessionInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutSessionInput | WinnerUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutSessionInput | WinnerUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlayerBoardsInput = {
    create?: XOR<UserCreateWithoutPlayerBoardsInput, UserUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayerBoardsInput
    connect?: UserWhereUniqueInput
  }

  export type GameSessionCreateNestedOneWithoutPlayerBoardsInput = {
    create?: XOR<GameSessionCreateWithoutPlayerBoardsInput, GameSessionUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutPlayerBoardsInput
    connect?: GameSessionWhereUniqueInput
  }

  export type PlayerBoardLocationCreateNestedManyWithoutBoardInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput> | PlayerBoardLocationCreateWithoutBoardInput[] | PlayerBoardLocationUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutBoardInput | PlayerBoardLocationCreateOrConnectWithoutBoardInput[]
    createMany?: PlayerBoardLocationCreateManyBoardInputEnvelope
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
  }

  export type WinnerCreateNestedManyWithoutBoardInput = {
    create?: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput> | WinnerCreateWithoutBoardInput[] | WinnerUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutBoardInput | WinnerCreateOrConnectWithoutBoardInput[]
    createMany?: WinnerCreateManyBoardInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type PlayerBoardLocationUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput> | PlayerBoardLocationCreateWithoutBoardInput[] | PlayerBoardLocationUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutBoardInput | PlayerBoardLocationCreateOrConnectWithoutBoardInput[]
    createMany?: PlayerBoardLocationCreateManyBoardInputEnvelope
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
  }

  export type WinnerUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput> | WinnerCreateWithoutBoardInput[] | WinnerUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutBoardInput | WinnerCreateOrConnectWithoutBoardInput[]
    createMany?: WinnerCreateManyBoardInputEnvelope
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPlayerBoardsNestedInput = {
    create?: XOR<UserCreateWithoutPlayerBoardsInput, UserUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayerBoardsInput
    upsert?: UserUpsertWithoutPlayerBoardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlayerBoardsInput, UserUpdateWithoutPlayerBoardsInput>, UserUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type GameSessionUpdateOneRequiredWithoutPlayerBoardsNestedInput = {
    create?: XOR<GameSessionCreateWithoutPlayerBoardsInput, GameSessionUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutPlayerBoardsInput
    upsert?: GameSessionUpsertWithoutPlayerBoardsInput
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutPlayerBoardsInput, GameSessionUpdateWithoutPlayerBoardsInput>, GameSessionUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type PlayerBoardLocationUpdateManyWithoutBoardNestedInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput> | PlayerBoardLocationCreateWithoutBoardInput[] | PlayerBoardLocationUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutBoardInput | PlayerBoardLocationCreateOrConnectWithoutBoardInput[]
    upsert?: PlayerBoardLocationUpsertWithWhereUniqueWithoutBoardInput | PlayerBoardLocationUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: PlayerBoardLocationCreateManyBoardInputEnvelope
    set?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    disconnect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    delete?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    update?: PlayerBoardLocationUpdateWithWhereUniqueWithoutBoardInput | PlayerBoardLocationUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: PlayerBoardLocationUpdateManyWithWhereWithoutBoardInput | PlayerBoardLocationUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
  }

  export type WinnerUpdateManyWithoutBoardNestedInput = {
    create?: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput> | WinnerCreateWithoutBoardInput[] | WinnerUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutBoardInput | WinnerCreateOrConnectWithoutBoardInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutBoardInput | WinnerUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: WinnerCreateManyBoardInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutBoardInput | WinnerUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutBoardInput | WinnerUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type PlayerBoardLocationUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput> | PlayerBoardLocationCreateWithoutBoardInput[] | PlayerBoardLocationUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: PlayerBoardLocationCreateOrConnectWithoutBoardInput | PlayerBoardLocationCreateOrConnectWithoutBoardInput[]
    upsert?: PlayerBoardLocationUpsertWithWhereUniqueWithoutBoardInput | PlayerBoardLocationUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: PlayerBoardLocationCreateManyBoardInputEnvelope
    set?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    disconnect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    delete?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    connect?: PlayerBoardLocationWhereUniqueInput | PlayerBoardLocationWhereUniqueInput[]
    update?: PlayerBoardLocationUpdateWithWhereUniqueWithoutBoardInput | PlayerBoardLocationUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: PlayerBoardLocationUpdateManyWithWhereWithoutBoardInput | PlayerBoardLocationUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
  }

  export type WinnerUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput> | WinnerCreateWithoutBoardInput[] | WinnerUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: WinnerCreateOrConnectWithoutBoardInput | WinnerCreateOrConnectWithoutBoardInput[]
    upsert?: WinnerUpsertWithWhereUniqueWithoutBoardInput | WinnerUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: WinnerCreateManyBoardInputEnvelope
    set?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    disconnect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    delete?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    connect?: WinnerWhereUniqueInput | WinnerWhereUniqueInput[]
    update?: WinnerUpdateWithWhereUniqueWithoutBoardInput | WinnerUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: WinnerUpdateManyWithWhereWithoutBoardInput | WinnerUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
  }

  export type PlayerBoardCreateNestedOneWithoutLocationsInput = {
    create?: XOR<PlayerBoardCreateWithoutLocationsInput, PlayerBoardUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutLocationsInput
    connect?: PlayerBoardWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutPlayerBoardsInput = {
    create?: XOR<LocationCreateWithoutPlayerBoardsInput, LocationUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPlayerBoardsInput
    connect?: LocationWhereUniqueInput
  }

  export type PlayerBoardUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutLocationsInput, PlayerBoardUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutLocationsInput
    upsert?: PlayerBoardUpsertWithoutLocationsInput
    connect?: PlayerBoardWhereUniqueInput
    update?: XOR<XOR<PlayerBoardUpdateToOneWithWhereWithoutLocationsInput, PlayerBoardUpdateWithoutLocationsInput>, PlayerBoardUncheckedUpdateWithoutLocationsInput>
  }

  export type LocationUpdateOneRequiredWithoutPlayerBoardsNestedInput = {
    create?: XOR<LocationCreateWithoutPlayerBoardsInput, LocationUncheckedCreateWithoutPlayerBoardsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPlayerBoardsInput
    upsert?: LocationUpsertWithoutPlayerBoardsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutPlayerBoardsInput, LocationUpdateWithoutPlayerBoardsInput>, LocationUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type GameSessionCreateNestedOneWithoutRevealedLocationsInput = {
    create?: XOR<GameSessionCreateWithoutRevealedLocationsInput, GameSessionUncheckedCreateWithoutRevealedLocationsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutRevealedLocationsInput
    connect?: GameSessionWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutRevealedLocationsInput = {
    create?: XOR<LocationCreateWithoutRevealedLocationsInput, LocationUncheckedCreateWithoutRevealedLocationsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRevealedLocationsInput
    connect?: LocationWhereUniqueInput
  }

  export type GameSessionUpdateOneRequiredWithoutRevealedLocationsNestedInput = {
    create?: XOR<GameSessionCreateWithoutRevealedLocationsInput, GameSessionUncheckedCreateWithoutRevealedLocationsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutRevealedLocationsInput
    upsert?: GameSessionUpsertWithoutRevealedLocationsInput
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutRevealedLocationsInput, GameSessionUpdateWithoutRevealedLocationsInput>, GameSessionUncheckedUpdateWithoutRevealedLocationsInput>
  }

  export type LocationUpdateOneRequiredWithoutRevealedLocationsNestedInput = {
    create?: XOR<LocationCreateWithoutRevealedLocationsInput, LocationUncheckedCreateWithoutRevealedLocationsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutRevealedLocationsInput
    upsert?: LocationUpsertWithoutRevealedLocationsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutRevealedLocationsInput, LocationUpdateWithoutRevealedLocationsInput>, LocationUncheckedUpdateWithoutRevealedLocationsInput>
  }

  export type GameSessionCreateNestedOneWithoutWinnersInput = {
    create?: XOR<GameSessionCreateWithoutWinnersInput, GameSessionUncheckedCreateWithoutWinnersInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutWinnersInput
    connect?: GameSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWinsInput = {
    create?: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinsInput
    connect?: UserWhereUniqueInput
  }

  export type PlayerBoardCreateNestedOneWithoutWinsInput = {
    create?: XOR<PlayerBoardCreateWithoutWinsInput, PlayerBoardUncheckedCreateWithoutWinsInput>
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutWinsInput
    connect?: PlayerBoardWhereUniqueInput
  }

  export type GameSessionUpdateOneRequiredWithoutWinnersNestedInput = {
    create?: XOR<GameSessionCreateWithoutWinnersInput, GameSessionUncheckedCreateWithoutWinnersInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutWinnersInput
    upsert?: GameSessionUpsertWithoutWinnersInput
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutWinnersInput, GameSessionUpdateWithoutWinnersInput>, GameSessionUncheckedUpdateWithoutWinnersInput>
  }

  export type UserUpdateOneRequiredWithoutWinsNestedInput = {
    create?: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinsInput
    upsert?: UserUpsertWithoutWinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWinsInput, UserUpdateWithoutWinsInput>, UserUncheckedUpdateWithoutWinsInput>
  }

  export type PlayerBoardUpdateOneRequiredWithoutWinsNestedInput = {
    create?: XOR<PlayerBoardCreateWithoutWinsInput, PlayerBoardUncheckedCreateWithoutWinsInput>
    connectOrCreate?: PlayerBoardCreateOrConnectWithoutWinsInput
    upsert?: PlayerBoardUpsertWithoutWinsInput
    connect?: PlayerBoardWhereUniqueInput
    update?: XOR<XOR<PlayerBoardUpdateToOneWithWhereWithoutWinsInput, PlayerBoardUpdateWithoutWinsInput>, PlayerBoardUncheckedUpdateWithoutWinsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GameSessionCreateWithoutCreatedByInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationCreateNestedManyWithoutSessionInput
    winners?: WinnerCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutSessionInput
    winners?: WinnerUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutCreatedByInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput>
  }

  export type GameSessionCreateManyCreatedByInputEnvelope = {
    data: GameSessionCreateManyCreatedByInput | GameSessionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PlayerBoardCreateWithoutUserInput = {
    id?: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    session: GameSessionCreateNestedOneWithoutPlayerBoardsInput
    locations?: PlayerBoardLocationCreateNestedManyWithoutBoardInput
    wins?: WinnerCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    locations?: PlayerBoardLocationUncheckedCreateNestedManyWithoutBoardInput
    wins?: WinnerUncheckedCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardCreateOrConnectWithoutUserInput = {
    where: PlayerBoardWhereUniqueInput
    create: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput>
  }

  export type PlayerBoardCreateManyUserInputEnvelope = {
    data: PlayerBoardCreateManyUserInput | PlayerBoardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WinnerCreateWithoutUserInput = {
    id?: string
    winPattern: string
    place: number
    wonAt?: Date | string
    session: GameSessionCreateNestedOneWithoutWinnersInput
    board: PlayerBoardCreateNestedOneWithoutWinsInput
  }

  export type WinnerUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type WinnerCreateOrConnectWithoutUserInput = {
    where: WinnerWhereUniqueInput
    create: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput>
  }

  export type WinnerCreateManyUserInputEnvelope = {
    data: WinnerCreateManyUserInput | WinnerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GameSessionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutCreatedByInput, GameSessionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<GameSessionCreateWithoutCreatedByInput, GameSessionUncheckedCreateWithoutCreatedByInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutCreatedByInput, GameSessionUncheckedUpdateWithoutCreatedByInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutCreatedByInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type GameSessionScalarWhereInput = {
    AND?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    OR?: GameSessionScalarWhereInput[]
    NOT?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    id?: StringFilter<"GameSession"> | string
    code?: StringFilter<"GameSession"> | string
    status?: EnumGameStatusFilter<"GameSession"> | $Enums.GameStatus
    revealInterval?: IntFilter<"GameSession"> | number
    currentRevealIndex?: IntFilter<"GameSession"> | number
    maxReveals?: IntFilter<"GameSession"> | number
    createdById?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
  }

  export type PlayerBoardUpsertWithWhereUniqueWithoutUserInput = {
    where: PlayerBoardWhereUniqueInput
    update: XOR<PlayerBoardUpdateWithoutUserInput, PlayerBoardUncheckedUpdateWithoutUserInput>
    create: XOR<PlayerBoardCreateWithoutUserInput, PlayerBoardUncheckedCreateWithoutUserInput>
  }

  export type PlayerBoardUpdateWithWhereUniqueWithoutUserInput = {
    where: PlayerBoardWhereUniqueInput
    data: XOR<PlayerBoardUpdateWithoutUserInput, PlayerBoardUncheckedUpdateWithoutUserInput>
  }

  export type PlayerBoardUpdateManyWithWhereWithoutUserInput = {
    where: PlayerBoardScalarWhereInput
    data: XOR<PlayerBoardUpdateManyMutationInput, PlayerBoardUncheckedUpdateManyWithoutUserInput>
  }

  export type PlayerBoardScalarWhereInput = {
    AND?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
    OR?: PlayerBoardScalarWhereInput[]
    NOT?: PlayerBoardScalarWhereInput | PlayerBoardScalarWhereInput[]
    id?: StringFilter<"PlayerBoard"> | string
    userId?: StringFilter<"PlayerBoard"> | string
    sessionId?: StringFilter<"PlayerBoard"> | string
    boardLayout?: JsonFilter<"PlayerBoard">
    isReady?: BoolFilter<"PlayerBoard"> | boolean
    joinedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
    updatedAt?: DateTimeFilter<"PlayerBoard"> | Date | string
  }

  export type WinnerUpsertWithWhereUniqueWithoutUserInput = {
    where: WinnerWhereUniqueInput
    update: XOR<WinnerUpdateWithoutUserInput, WinnerUncheckedUpdateWithoutUserInput>
    create: XOR<WinnerCreateWithoutUserInput, WinnerUncheckedCreateWithoutUserInput>
  }

  export type WinnerUpdateWithWhereUniqueWithoutUserInput = {
    where: WinnerWhereUniqueInput
    data: XOR<WinnerUpdateWithoutUserInput, WinnerUncheckedUpdateWithoutUserInput>
  }

  export type WinnerUpdateManyWithWhereWithoutUserInput = {
    where: WinnerScalarWhereInput
    data: XOR<WinnerUpdateManyMutationInput, WinnerUncheckedUpdateManyWithoutUserInput>
  }

  export type WinnerScalarWhereInput = {
    AND?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
    OR?: WinnerScalarWhereInput[]
    NOT?: WinnerScalarWhereInput | WinnerScalarWhereInput[]
    id?: StringFilter<"Winner"> | string
    sessionId?: StringFilter<"Winner"> | string
    userId?: StringFilter<"Winner"> | string
    boardId?: StringFilter<"Winner"> | string
    winPattern?: StringFilter<"Winner"> | string
    place?: IntFilter<"Winner"> | number
    wonAt?: DateTimeFilter<"Winner"> | Date | string
  }

  export type PlayerBoardLocationCreateWithoutLocationInput = {
    id?: string
    position: number
    isSelected?: boolean
    board: PlayerBoardCreateNestedOneWithoutLocationsInput
  }

  export type PlayerBoardLocationUncheckedCreateWithoutLocationInput = {
    id?: string
    boardId: string
    position: number
    isSelected?: boolean
  }

  export type PlayerBoardLocationCreateOrConnectWithoutLocationInput = {
    where: PlayerBoardLocationWhereUniqueInput
    create: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput>
  }

  export type PlayerBoardLocationCreateManyLocationInputEnvelope = {
    data: PlayerBoardLocationCreateManyLocationInput | PlayerBoardLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type RevealedLocationCreateWithoutLocationInput = {
    id?: string
    revealIndex: number
    revealedAt?: Date | string
    session: GameSessionCreateNestedOneWithoutRevealedLocationsInput
  }

  export type RevealedLocationUncheckedCreateWithoutLocationInput = {
    id?: string
    sessionId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type RevealedLocationCreateOrConnectWithoutLocationInput = {
    where: RevealedLocationWhereUniqueInput
    create: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput>
  }

  export type RevealedLocationCreateManyLocationInputEnvelope = {
    data: RevealedLocationCreateManyLocationInput | RevealedLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type PlayerBoardLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: PlayerBoardLocationWhereUniqueInput
    update: XOR<PlayerBoardLocationUpdateWithoutLocationInput, PlayerBoardLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<PlayerBoardLocationCreateWithoutLocationInput, PlayerBoardLocationUncheckedCreateWithoutLocationInput>
  }

  export type PlayerBoardLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: PlayerBoardLocationWhereUniqueInput
    data: XOR<PlayerBoardLocationUpdateWithoutLocationInput, PlayerBoardLocationUncheckedUpdateWithoutLocationInput>
  }

  export type PlayerBoardLocationUpdateManyWithWhereWithoutLocationInput = {
    where: PlayerBoardLocationScalarWhereInput
    data: XOR<PlayerBoardLocationUpdateManyMutationInput, PlayerBoardLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type PlayerBoardLocationScalarWhereInput = {
    AND?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
    OR?: PlayerBoardLocationScalarWhereInput[]
    NOT?: PlayerBoardLocationScalarWhereInput | PlayerBoardLocationScalarWhereInput[]
    id?: StringFilter<"PlayerBoardLocation"> | string
    boardId?: StringFilter<"PlayerBoardLocation"> | string
    locationId?: StringFilter<"PlayerBoardLocation"> | string
    position?: IntFilter<"PlayerBoardLocation"> | number
    isSelected?: BoolFilter<"PlayerBoardLocation"> | boolean
  }

  export type RevealedLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: RevealedLocationWhereUniqueInput
    update: XOR<RevealedLocationUpdateWithoutLocationInput, RevealedLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<RevealedLocationCreateWithoutLocationInput, RevealedLocationUncheckedCreateWithoutLocationInput>
  }

  export type RevealedLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: RevealedLocationWhereUniqueInput
    data: XOR<RevealedLocationUpdateWithoutLocationInput, RevealedLocationUncheckedUpdateWithoutLocationInput>
  }

  export type RevealedLocationUpdateManyWithWhereWithoutLocationInput = {
    where: RevealedLocationScalarWhereInput
    data: XOR<RevealedLocationUpdateManyMutationInput, RevealedLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type RevealedLocationScalarWhereInput = {
    AND?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
    OR?: RevealedLocationScalarWhereInput[]
    NOT?: RevealedLocationScalarWhereInput | RevealedLocationScalarWhereInput[]
    id?: StringFilter<"RevealedLocation"> | string
    sessionId?: StringFilter<"RevealedLocation"> | string
    locationId?: StringFilter<"RevealedLocation"> | string
    revealIndex?: IntFilter<"RevealedLocation"> | number
    revealedAt?: DateTimeFilter<"RevealedLocation"> | Date | string
  }

  export type UserCreateWithoutCreatedSessionsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardCreateNestedManyWithoutUserInput
    wins?: WinnerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedSessionsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutUserInput
    wins?: WinnerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSessionsInput, UserUncheckedCreateWithoutCreatedSessionsInput>
  }

  export type PlayerBoardCreateWithoutSessionInput = {
    id?: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlayerBoardsInput
    locations?: PlayerBoardLocationCreateNestedManyWithoutBoardInput
    wins?: WinnerCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUncheckedCreateWithoutSessionInput = {
    id?: string
    userId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    locations?: PlayerBoardLocationUncheckedCreateNestedManyWithoutBoardInput
    wins?: WinnerUncheckedCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardCreateOrConnectWithoutSessionInput = {
    where: PlayerBoardWhereUniqueInput
    create: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput>
  }

  export type PlayerBoardCreateManySessionInputEnvelope = {
    data: PlayerBoardCreateManySessionInput | PlayerBoardCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type RevealedLocationCreateWithoutSessionInput = {
    id?: string
    revealIndex: number
    revealedAt?: Date | string
    location: LocationCreateNestedOneWithoutRevealedLocationsInput
  }

  export type RevealedLocationUncheckedCreateWithoutSessionInput = {
    id?: string
    locationId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type RevealedLocationCreateOrConnectWithoutSessionInput = {
    where: RevealedLocationWhereUniqueInput
    create: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput>
  }

  export type RevealedLocationCreateManySessionInputEnvelope = {
    data: RevealedLocationCreateManySessionInput | RevealedLocationCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type WinnerCreateWithoutSessionInput = {
    id?: string
    winPattern: string
    place: number
    wonAt?: Date | string
    user: UserCreateNestedOneWithoutWinsInput
    board: PlayerBoardCreateNestedOneWithoutWinsInput
  }

  export type WinnerUncheckedCreateWithoutSessionInput = {
    id?: string
    userId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type WinnerCreateOrConnectWithoutSessionInput = {
    where: WinnerWhereUniqueInput
    create: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput>
  }

  export type WinnerCreateManySessionInputEnvelope = {
    data: WinnerCreateManySessionInput | WinnerCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedSessionsInput = {
    update: XOR<UserUpdateWithoutCreatedSessionsInput, UserUncheckedUpdateWithoutCreatedSessionsInput>
    create: XOR<UserCreateWithoutCreatedSessionsInput, UserUncheckedCreateWithoutCreatedSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSessionsInput, UserUncheckedUpdateWithoutCreatedSessionsInput>
  }

  export type UserUpdateWithoutCreatedSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUpdateManyWithoutUserNestedInput
    wins?: WinnerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutUserNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlayerBoardUpsertWithWhereUniqueWithoutSessionInput = {
    where: PlayerBoardWhereUniqueInput
    update: XOR<PlayerBoardUpdateWithoutSessionInput, PlayerBoardUncheckedUpdateWithoutSessionInput>
    create: XOR<PlayerBoardCreateWithoutSessionInput, PlayerBoardUncheckedCreateWithoutSessionInput>
  }

  export type PlayerBoardUpdateWithWhereUniqueWithoutSessionInput = {
    where: PlayerBoardWhereUniqueInput
    data: XOR<PlayerBoardUpdateWithoutSessionInput, PlayerBoardUncheckedUpdateWithoutSessionInput>
  }

  export type PlayerBoardUpdateManyWithWhereWithoutSessionInput = {
    where: PlayerBoardScalarWhereInput
    data: XOR<PlayerBoardUpdateManyMutationInput, PlayerBoardUncheckedUpdateManyWithoutSessionInput>
  }

  export type RevealedLocationUpsertWithWhereUniqueWithoutSessionInput = {
    where: RevealedLocationWhereUniqueInput
    update: XOR<RevealedLocationUpdateWithoutSessionInput, RevealedLocationUncheckedUpdateWithoutSessionInput>
    create: XOR<RevealedLocationCreateWithoutSessionInput, RevealedLocationUncheckedCreateWithoutSessionInput>
  }

  export type RevealedLocationUpdateWithWhereUniqueWithoutSessionInput = {
    where: RevealedLocationWhereUniqueInput
    data: XOR<RevealedLocationUpdateWithoutSessionInput, RevealedLocationUncheckedUpdateWithoutSessionInput>
  }

  export type RevealedLocationUpdateManyWithWhereWithoutSessionInput = {
    where: RevealedLocationScalarWhereInput
    data: XOR<RevealedLocationUpdateManyMutationInput, RevealedLocationUncheckedUpdateManyWithoutSessionInput>
  }

  export type WinnerUpsertWithWhereUniqueWithoutSessionInput = {
    where: WinnerWhereUniqueInput
    update: XOR<WinnerUpdateWithoutSessionInput, WinnerUncheckedUpdateWithoutSessionInput>
    create: XOR<WinnerCreateWithoutSessionInput, WinnerUncheckedCreateWithoutSessionInput>
  }

  export type WinnerUpdateWithWhereUniqueWithoutSessionInput = {
    where: WinnerWhereUniqueInput
    data: XOR<WinnerUpdateWithoutSessionInput, WinnerUncheckedUpdateWithoutSessionInput>
  }

  export type WinnerUpdateManyWithWhereWithoutSessionInput = {
    where: WinnerScalarWhereInput
    data: XOR<WinnerUpdateManyMutationInput, WinnerUncheckedUpdateManyWithoutSessionInput>
  }

  export type UserCreateWithoutPlayerBoardsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionCreateNestedManyWithoutCreatedByInput
    wins?: WinnerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlayerBoardsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionUncheckedCreateNestedManyWithoutCreatedByInput
    wins?: WinnerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlayerBoardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayerBoardsInput, UserUncheckedCreateWithoutPlayerBoardsInput>
  }

  export type GameSessionCreateWithoutPlayerBoardsInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedSessionsInput
    revealedLocations?: RevealedLocationCreateNestedManyWithoutSessionInput
    winners?: WinnerCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutPlayerBoardsInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    createdById: string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutSessionInput
    winners?: WinnerUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutPlayerBoardsInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutPlayerBoardsInput, GameSessionUncheckedCreateWithoutPlayerBoardsInput>
  }

  export type PlayerBoardLocationCreateWithoutBoardInput = {
    id?: string
    position: number
    isSelected?: boolean
    location: LocationCreateNestedOneWithoutPlayerBoardsInput
  }

  export type PlayerBoardLocationUncheckedCreateWithoutBoardInput = {
    id?: string
    locationId: string
    position: number
    isSelected?: boolean
  }

  export type PlayerBoardLocationCreateOrConnectWithoutBoardInput = {
    where: PlayerBoardLocationWhereUniqueInput
    create: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput>
  }

  export type PlayerBoardLocationCreateManyBoardInputEnvelope = {
    data: PlayerBoardLocationCreateManyBoardInput | PlayerBoardLocationCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type WinnerCreateWithoutBoardInput = {
    id?: string
    winPattern: string
    place: number
    wonAt?: Date | string
    session: GameSessionCreateNestedOneWithoutWinnersInput
    user: UserCreateNestedOneWithoutWinsInput
  }

  export type WinnerUncheckedCreateWithoutBoardInput = {
    id?: string
    sessionId: string
    userId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type WinnerCreateOrConnectWithoutBoardInput = {
    where: WinnerWhereUniqueInput
    create: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput>
  }

  export type WinnerCreateManyBoardInputEnvelope = {
    data: WinnerCreateManyBoardInput | WinnerCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlayerBoardsInput = {
    update: XOR<UserUpdateWithoutPlayerBoardsInput, UserUncheckedUpdateWithoutPlayerBoardsInput>
    create: XOR<UserCreateWithoutPlayerBoardsInput, UserUncheckedCreateWithoutPlayerBoardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlayerBoardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlayerBoardsInput, UserUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type UserUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUpdateManyWithoutCreatedByNestedInput
    wins?: WinnerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameSessionUpsertWithoutPlayerBoardsInput = {
    update: XOR<GameSessionUpdateWithoutPlayerBoardsInput, GameSessionUncheckedUpdateWithoutPlayerBoardsInput>
    create: XOR<GameSessionCreateWithoutPlayerBoardsInput, GameSessionUncheckedCreateWithoutPlayerBoardsInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutPlayerBoardsInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutPlayerBoardsInput, GameSessionUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type GameSessionUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSessionsNestedInput
    revealedLocations?: RevealedLocationUpdateManyWithoutSessionNestedInput
    winners?: WinnerUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutSessionNestedInput
    winners?: WinnerUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type PlayerBoardLocationUpsertWithWhereUniqueWithoutBoardInput = {
    where: PlayerBoardLocationWhereUniqueInput
    update: XOR<PlayerBoardLocationUpdateWithoutBoardInput, PlayerBoardLocationUncheckedUpdateWithoutBoardInput>
    create: XOR<PlayerBoardLocationCreateWithoutBoardInput, PlayerBoardLocationUncheckedCreateWithoutBoardInput>
  }

  export type PlayerBoardLocationUpdateWithWhereUniqueWithoutBoardInput = {
    where: PlayerBoardLocationWhereUniqueInput
    data: XOR<PlayerBoardLocationUpdateWithoutBoardInput, PlayerBoardLocationUncheckedUpdateWithoutBoardInput>
  }

  export type PlayerBoardLocationUpdateManyWithWhereWithoutBoardInput = {
    where: PlayerBoardLocationScalarWhereInput
    data: XOR<PlayerBoardLocationUpdateManyMutationInput, PlayerBoardLocationUncheckedUpdateManyWithoutBoardInput>
  }

  export type WinnerUpsertWithWhereUniqueWithoutBoardInput = {
    where: WinnerWhereUniqueInput
    update: XOR<WinnerUpdateWithoutBoardInput, WinnerUncheckedUpdateWithoutBoardInput>
    create: XOR<WinnerCreateWithoutBoardInput, WinnerUncheckedCreateWithoutBoardInput>
  }

  export type WinnerUpdateWithWhereUniqueWithoutBoardInput = {
    where: WinnerWhereUniqueInput
    data: XOR<WinnerUpdateWithoutBoardInput, WinnerUncheckedUpdateWithoutBoardInput>
  }

  export type WinnerUpdateManyWithWhereWithoutBoardInput = {
    where: WinnerScalarWhereInput
    data: XOR<WinnerUpdateManyMutationInput, WinnerUncheckedUpdateManyWithoutBoardInput>
  }

  export type PlayerBoardCreateWithoutLocationsInput = {
    id?: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlayerBoardsInput
    session: GameSessionCreateNestedOneWithoutPlayerBoardsInput
    wins?: WinnerCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUncheckedCreateWithoutLocationsInput = {
    id?: string
    userId: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    wins?: WinnerUncheckedCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardCreateOrConnectWithoutLocationsInput = {
    where: PlayerBoardWhereUniqueInput
    create: XOR<PlayerBoardCreateWithoutLocationsInput, PlayerBoardUncheckedCreateWithoutLocationsInput>
  }

  export type LocationCreateWithoutPlayerBoardsInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revealedLocations?: RevealedLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutPlayerBoardsInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutPlayerBoardsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutPlayerBoardsInput, LocationUncheckedCreateWithoutPlayerBoardsInput>
  }

  export type PlayerBoardUpsertWithoutLocationsInput = {
    update: XOR<PlayerBoardUpdateWithoutLocationsInput, PlayerBoardUncheckedUpdateWithoutLocationsInput>
    create: XOR<PlayerBoardCreateWithoutLocationsInput, PlayerBoardUncheckedCreateWithoutLocationsInput>
    where?: PlayerBoardWhereInput
  }

  export type PlayerBoardUpdateToOneWithWhereWithoutLocationsInput = {
    where?: PlayerBoardWhereInput
    data: XOR<PlayerBoardUpdateWithoutLocationsInput, PlayerBoardUncheckedUpdateWithoutLocationsInput>
  }

  export type PlayerBoardUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlayerBoardsNestedInput
    session?: GameSessionUpdateOneRequiredWithoutPlayerBoardsNestedInput
    wins?: WinnerUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wins?: WinnerUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type LocationUpsertWithoutPlayerBoardsInput = {
    update: XOR<LocationUpdateWithoutPlayerBoardsInput, LocationUncheckedUpdateWithoutPlayerBoardsInput>
    create: XOR<LocationCreateWithoutPlayerBoardsInput, LocationUncheckedCreateWithoutPlayerBoardsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutPlayerBoardsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutPlayerBoardsInput, LocationUncheckedUpdateWithoutPlayerBoardsInput>
  }

  export type LocationUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revealedLocations?: RevealedLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutPlayerBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type GameSessionCreateWithoutRevealedLocationsInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedSessionsInput
    playerBoards?: PlayerBoardCreateNestedManyWithoutSessionInput
    winners?: WinnerCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutRevealedLocationsInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    createdById: string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutSessionInput
    winners?: WinnerUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutRevealedLocationsInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutRevealedLocationsInput, GameSessionUncheckedCreateWithoutRevealedLocationsInput>
  }

  export type LocationCreateWithoutRevealedLocationsInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutRevealedLocationsInput = {
    id?: string
    name: string
    description?: string | null
    imageUrl?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutRevealedLocationsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutRevealedLocationsInput, LocationUncheckedCreateWithoutRevealedLocationsInput>
  }

  export type GameSessionUpsertWithoutRevealedLocationsInput = {
    update: XOR<GameSessionUpdateWithoutRevealedLocationsInput, GameSessionUncheckedUpdateWithoutRevealedLocationsInput>
    create: XOR<GameSessionCreateWithoutRevealedLocationsInput, GameSessionUncheckedCreateWithoutRevealedLocationsInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutRevealedLocationsInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutRevealedLocationsInput, GameSessionUncheckedUpdateWithoutRevealedLocationsInput>
  }

  export type GameSessionUpdateWithoutRevealedLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSessionsNestedInput
    playerBoards?: PlayerBoardUpdateManyWithoutSessionNestedInput
    winners?: WinnerUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutRevealedLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutSessionNestedInput
    winners?: WinnerUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type LocationUpsertWithoutRevealedLocationsInput = {
    update: XOR<LocationUpdateWithoutRevealedLocationsInput, LocationUncheckedUpdateWithoutRevealedLocationsInput>
    create: XOR<LocationCreateWithoutRevealedLocationsInput, LocationUncheckedCreateWithoutRevealedLocationsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutRevealedLocationsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutRevealedLocationsInput, LocationUncheckedUpdateWithoutRevealedLocationsInput>
  }

  export type LocationUpdateWithoutRevealedLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutRevealedLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type GameSessionCreateWithoutWinnersInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedSessionsInput
    playerBoards?: PlayerBoardCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutWinnersInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    createdById: string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutSessionInput
    revealedLocations?: RevealedLocationUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutWinnersInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutWinnersInput, GameSessionUncheckedCreateWithoutWinnersInput>
  }

  export type UserCreateWithoutWinsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionCreateNestedManyWithoutCreatedByInput
    playerBoards?: PlayerBoardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWinsInput = {
    id?: string
    clerkId: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSessions?: GameSessionUncheckedCreateNestedManyWithoutCreatedByInput
    playerBoards?: PlayerBoardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
  }

  export type PlayerBoardCreateWithoutWinsInput = {
    id?: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlayerBoardsInput
    session: GameSessionCreateNestedOneWithoutPlayerBoardsInput
    locations?: PlayerBoardLocationCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardUncheckedCreateWithoutWinsInput = {
    id?: string
    userId: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
    locations?: PlayerBoardLocationUncheckedCreateNestedManyWithoutBoardInput
  }

  export type PlayerBoardCreateOrConnectWithoutWinsInput = {
    where: PlayerBoardWhereUniqueInput
    create: XOR<PlayerBoardCreateWithoutWinsInput, PlayerBoardUncheckedCreateWithoutWinsInput>
  }

  export type GameSessionUpsertWithoutWinnersInput = {
    update: XOR<GameSessionUpdateWithoutWinnersInput, GameSessionUncheckedUpdateWithoutWinnersInput>
    create: XOR<GameSessionCreateWithoutWinnersInput, GameSessionUncheckedCreateWithoutWinnersInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutWinnersInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutWinnersInput, GameSessionUncheckedUpdateWithoutWinnersInput>
  }

  export type GameSessionUpdateWithoutWinnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSessionsNestedInput
    playerBoards?: PlayerBoardUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutWinnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type UserUpsertWithoutWinsInput = {
    update: XOR<UserUpdateWithoutWinsInput, UserUncheckedUpdateWithoutWinsInput>
    create: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWinsInput, UserUncheckedUpdateWithoutWinsInput>
  }

  export type UserUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUpdateManyWithoutCreatedByNestedInput
    playerBoards?: PlayerBoardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSessions?: GameSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlayerBoardUpsertWithoutWinsInput = {
    update: XOR<PlayerBoardUpdateWithoutWinsInput, PlayerBoardUncheckedUpdateWithoutWinsInput>
    create: XOR<PlayerBoardCreateWithoutWinsInput, PlayerBoardUncheckedCreateWithoutWinsInput>
    where?: PlayerBoardWhereInput
  }

  export type PlayerBoardUpdateToOneWithWhereWithoutWinsInput = {
    where?: PlayerBoardWhereInput
    data: XOR<PlayerBoardUpdateWithoutWinsInput, PlayerBoardUncheckedUpdateWithoutWinsInput>
  }

  export type PlayerBoardUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlayerBoardsNestedInput
    session?: GameSessionUpdateOneRequiredWithoutPlayerBoardsNestedInput
    locations?: PlayerBoardLocationUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: PlayerBoardLocationUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type GameSessionCreateManyCreatedByInput = {
    id?: string
    code: string
    status?: $Enums.GameStatus
    revealInterval: number
    currentRevealIndex?: number
    maxReveals?: number
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerBoardCreateManyUserInput = {
    id?: string
    sessionId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
  }

  export type WinnerCreateManyUserInput = {
    id?: string
    sessionId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type GameSessionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUpdateManyWithoutSessionNestedInput
    winners?: WinnerUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerBoards?: PlayerBoardUncheckedUpdateManyWithoutSessionNestedInput
    revealedLocations?: RevealedLocationUncheckedUpdateManyWithoutSessionNestedInput
    winners?: WinnerUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    revealInterval?: IntFieldUpdateOperationsInput | number
    currentRevealIndex?: IntFieldUpdateOperationsInput | number
    maxReveals?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutPlayerBoardsNestedInput
    locations?: PlayerBoardLocationUpdateManyWithoutBoardNestedInput
    wins?: WinnerUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: PlayerBoardLocationUncheckedUpdateManyWithoutBoardNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutWinnersNestedInput
    board?: PlayerBoardUpdateOneRequiredWithoutWinsNestedInput
  }

  export type WinnerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardLocationCreateManyLocationInput = {
    id?: string
    boardId: string
    position: number
    isSelected?: boolean
  }

  export type RevealedLocationCreateManyLocationInput = {
    id?: string
    sessionId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type PlayerBoardLocationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    board?: PlayerBoardUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type PlayerBoardLocationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerBoardLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RevealedLocationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutRevealedLocationsNestedInput
  }

  export type RevealedLocationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevealedLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardCreateManySessionInput = {
    id?: string
    userId: string
    boardLayout: JsonNullValueInput | InputJsonValue
    isReady?: boolean
    joinedAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevealedLocationCreateManySessionInput = {
    id?: string
    locationId: string
    revealIndex: number
    revealedAt?: Date | string
  }

  export type WinnerCreateManySessionInput = {
    id?: string
    userId: string
    boardId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type PlayerBoardUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlayerBoardsNestedInput
    locations?: PlayerBoardLocationUpdateManyWithoutBoardNestedInput
    wins?: WinnerUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: PlayerBoardLocationUncheckedUpdateManyWithoutBoardNestedInput
    wins?: WinnerUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type PlayerBoardUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardLayout?: JsonNullValueInput | InputJsonValue
    isReady?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevealedLocationUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutRevealedLocationsNestedInput
  }

  export type RevealedLocationUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevealedLocationUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    revealIndex?: IntFieldUpdateOperationsInput | number
    revealedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWinsNestedInput
    board?: PlayerBoardUpdateOneRequiredWithoutWinsNestedInput
  }

  export type WinnerUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerBoardLocationCreateManyBoardInput = {
    id?: string
    locationId: string
    position: number
    isSelected?: boolean
  }

  export type WinnerCreateManyBoardInput = {
    id?: string
    sessionId: string
    userId: string
    winPattern: string
    place: number
    wonAt?: Date | string
  }

  export type PlayerBoardLocationUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutPlayerBoardsNestedInput
  }

  export type PlayerBoardLocationUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerBoardLocationUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isSelected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WinnerUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutWinnersNestedInput
    user?: UserUpdateOneRequiredWithoutWinsNestedInput
  }

  export type WinnerUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WinnerUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    winPattern?: StringFieldUpdateOperationsInput | string
    place?: IntFieldUpdateOperationsInput | number
    wonAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}