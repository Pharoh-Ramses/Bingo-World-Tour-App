
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  name: 'name',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameSessionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  status: 'status',
  revealInterval: 'revealInterval',
  currentRevealIndex: 'currentRevealIndex',
  maxReveals: 'maxReveals',
  createdById: 'createdById',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerBoardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  boardLayout: 'boardLayout',
  isReady: 'isReady',
  joinedAt: 'joinedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerBoardLocationScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  locationId: 'locationId',
  position: 'position',
  isSelected: 'isSelected'
};

exports.Prisma.RevealedLocationScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  locationId: 'locationId',
  revealIndex: 'revealIndex',
  revealedAt: 'revealedAt'
};

exports.Prisma.WinnerScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  boardId: 'boardId',
  winPattern: 'winPattern',
  place: 'place',
  wonAt: 'wonAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GameStatus = exports.$Enums.GameStatus = {
  WAITING: 'WAITING',
  STARTING: 'STARTING',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Location: 'Location',
  GameSession: 'GameSession',
  PlayerBoard: 'PlayerBoard',
  PlayerBoardLocation: 'PlayerBoardLocation',
  RevealedLocation: 'RevealedLocation',
  Winner: 'Winner'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ramses/Builds/Bingo World Tour/Bingo-world-tour-websocket-server/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ramses/Builds/Bingo World Tour/Bingo-world-tour-websocket-server/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User model - minimal data since Clerk handles most user info\nmodel User {\n  id        String   @id @default(cuid())\n  clerkId   String   @unique\n  email     String\n  name      String?\n  isAdmin   Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  createdSessions GameSession[]\n  playerBoards    PlayerBoard[]\n  wins            Winner[]\n\n  @@map(\"users\")\n}\n\n// Travel locations for the bingo game\nmodel Location {\n  id          String   @id @default(cuid())\n  name        String   @unique\n  description String?\n  imageUrl    String?\n  category    String? // e.g., \"city\", \"natural\", \"cultural\"\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  playerBoards      PlayerBoardLocation[]\n  revealedLocations RevealedLocation[]\n\n  @@map(\"locations\")\n}\n\n// Game sessions created by admins\nmodel GameSession {\n  id                 String     @id @default(cuid())\n  code               String     @unique // 6-character join code\n  status             GameStatus @default(WAITING)\n  revealInterval     Int // minutes between reveals\n  currentRevealIndex Int        @default(0)\n  maxReveals         Int        @default(50) // total possible reveals\n  createdById        String\n  startedAt          DateTime?\n  endedAt            DateTime?\n  createdAt          DateTime   @default(now())\n  updatedAt          DateTime   @updatedAt\n\n  // Relations\n  createdBy         User               @relation(fields: [createdById], references: [id])\n  playerBoards      PlayerBoard[]\n  revealedLocations RevealedLocation[]\n  winners           Winner[]\n\n  @@map(\"game_sessions\")\n}\n\n// Player's bingo board for a specific session\nmodel PlayerBoard {\n  id          String   @id @default(cuid())\n  userId      String\n  sessionId   String\n  boardLayout Json // 5x5 grid layout with location positions\n  isReady     Boolean  @default(false)\n  joinedAt    DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  user      User                  @relation(fields: [userId], references: [id])\n  session   GameSession           @relation(fields: [sessionId], references: [id])\n  locations PlayerBoardLocation[]\n  wins      Winner[]\n\n  @@unique([userId, sessionId])\n  @@map(\"player_boards\")\n}\n\n// Junction table for locations on player boards\nmodel PlayerBoardLocation {\n  id         String  @id @default(cuid())\n  boardId    String\n  locationId String\n  position   Int // 0-24 (5x5 grid, center is 12)\n  isSelected Boolean @default(false) // player marked this tile\n\n  // Relations\n  board    PlayerBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)\n  location Location    @relation(fields: [locationId], references: [id])\n\n  @@unique([boardId, position])\n  @@map(\"player_board_locations\")\n}\n\n// Locations revealed during a game session\nmodel RevealedLocation {\n  id          String   @id @default(cuid())\n  sessionId   String\n  locationId  String\n  revealIndex Int // order of reveal (1st, 2nd, etc.)\n  revealedAt  DateTime @default(now())\n\n  // Relations\n  session  GameSession @relation(fields: [sessionId], references: [id])\n  location Location    @relation(fields: [locationId], references: [id])\n\n  @@unique([sessionId, revealIndex])\n  @@map(\"revealed_locations\")\n}\n\n// Winners of game sessions\nmodel Winner {\n  id         String   @id @default(cuid())\n  sessionId  String\n  userId     String\n  boardId    String\n  winPattern String // e.g., \"row-1\", \"column-2\", \"diagonal-1\"\n  place      Int // 1st, 2nd, 3rd place\n  wonAt      DateTime @default(now())\n\n  // Relations\n  session GameSession @relation(fields: [sessionId], references: [id])\n  user    User        @relation(fields: [userId], references: [id])\n  board   PlayerBoard @relation(fields: [boardId], references: [id])\n\n  @@unique([sessionId, place])\n  @@map(\"winners\")\n}\n\n// Enums\nenum GameStatus {\n  WAITING // waiting for players to join and set up boards\n  STARTING // game is about to start\n  ACTIVE // game is in progress\n  PAUSED // game is paused\n  ENDED // game has ended\n}\n",
  "inlineSchemaHash": "90ab582a76fb6fc820e012ee15dbc9de34b4283a3f1128f533dfa8307b0bfed9",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAdmin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdSessions\",\"kind\":\"object\",\"type\":\"GameSession\",\"relationName\":\"GameSessionToUser\"},{\"name\":\"playerBoards\",\"kind\":\"object\",\"type\":\"PlayerBoard\",\"relationName\":\"PlayerBoardToUser\"},{\"name\":\"wins\",\"kind\":\"object\",\"type\":\"Winner\",\"relationName\":\"UserToWinner\"}],\"dbName\":\"users\"},\"Location\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"playerBoards\",\"kind\":\"object\",\"type\":\"PlayerBoardLocation\",\"relationName\":\"LocationToPlayerBoardLocation\"},{\"name\":\"revealedLocations\",\"kind\":\"object\",\"type\":\"RevealedLocation\",\"relationName\":\"LocationToRevealedLocation\"}],\"dbName\":\"locations\"},\"GameSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"GameStatus\"},{\"name\":\"revealInterval\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentRevealIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxReveals\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GameSessionToUser\"},{\"name\":\"playerBoards\",\"kind\":\"object\",\"type\":\"PlayerBoard\",\"relationName\":\"GameSessionToPlayerBoard\"},{\"name\":\"revealedLocations\",\"kind\":\"object\",\"type\":\"RevealedLocation\",\"relationName\":\"GameSessionToRevealedLocation\"},{\"name\":\"winners\",\"kind\":\"object\",\"type\":\"Winner\",\"relationName\":\"GameSessionToWinner\"}],\"dbName\":\"game_sessions\"},\"PlayerBoard\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardLayout\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isReady\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PlayerBoardToUser\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"GameSession\",\"relationName\":\"GameSessionToPlayerBoard\"},{\"name\":\"locations\",\"kind\":\"object\",\"type\":\"PlayerBoardLocation\",\"relationName\":\"PlayerBoardToPlayerBoardLocation\"},{\"name\":\"wins\",\"kind\":\"object\",\"type\":\"Winner\",\"relationName\":\"PlayerBoardToWinner\"}],\"dbName\":\"player_boards\"},\"PlayerBoardLocation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isSelected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"PlayerBoard\",\"relationName\":\"PlayerBoardToPlayerBoardLocation\"},{\"name\":\"location\",\"kind\":\"object\",\"type\":\"Location\",\"relationName\":\"LocationToPlayerBoardLocation\"}],\"dbName\":\"player_board_locations\"},\"RevealedLocation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"revealIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"revealedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"GameSession\",\"relationName\":\"GameSessionToRevealedLocation\"},{\"name\":\"location\",\"kind\":\"object\",\"type\":\"Location\",\"relationName\":\"LocationToRevealedLocation\"}],\"dbName\":\"revealed_locations\"},\"Winner\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"winPattern\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"place\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wonAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"GameSession\",\"relationName\":\"GameSessionToWinner\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWinner\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"PlayerBoard\",\"relationName\":\"PlayerBoardToWinner\"}],\"dbName\":\"winners\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

